<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IronyScriptDotNet</name>
    </assembly>
    <members>
        <member name="T:ScriptNET.ScriptTypeConvertExpr">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptExpr">
            <summary>
            Base Node for Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptAst">
            <summary>
            Base class for Script.NET Ast's nodes
            </summary>
        </member>
        <member name="M:ScriptNET.ScriptAst.#ctor(Irony.Compiler.AstNodeArgs)">
            <summary>
            Base constructor
            </summary>
            <param name="args">AstNodeList</param>
        </member>
        <member name="M:ScriptNET.ScriptAst.Code">
            <summary>
            Returns Source code for given AST
            </summary>
            <returns></returns>
        </member>
        <member name="M:ScriptNET.ScriptAst.ConcreteSyntaxTree">
            <summary>
            Returns string representing concrete syntax tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:ScriptNET.ScriptAst.Execute(ScriptNET.IScriptContext)">
            <summary>
            Evaluates all child nodes
            </summary>
            <param name="Context">ScriptContext object</param>
            <returns>result of the last node evaluation</returns>
        </member>
        <member name="M:ScriptNET.ScriptAst.Evaluate(ScriptNET.IScriptContext)">
            <summary>
            Evaluates script
            </summary>
            <param name="Context">ScriptContext</param>
        </member>
        <member name="M:ScriptNET.ScriptExpr.#ctor(Irony.Compiler.AstNodeArgs)">
            <summary>
            Default constructor
            </summary>
            <param name="args">arguments</param>
        </member>
        <member name="T:ScriptNET.ScriptFlowControlStatement">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptStatement">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptCompoundStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.IScriptScope">
            <summary>
            Represents Scope. Scopes are used to store variables, types and functions
            </summary>
        </member>
        <member name="M:ScriptNET.IScriptScope.GetItem(System.String,ScriptNET.ContextItem)">
            <summary>
            Returns Item: variable or type
            </summary>
            <param name="id">id of item</param>
            <param name="contextItemType">type of item</param>
            <returns>value of given ID</returns>
        </member>
        <member name="M:ScriptNET.IScriptScope.SetItem(System.String,ScriptNET.ContextItem,System.Object)">
            <summary>
            Sets Item: variable or type
            </summary>
            <param name="id">item's id</param>
            <param name="contextItemType">type of item</param>
            <param name="value">value</param>
        </member>
        <member name="M:ScriptNET.IScriptScope.Clean(ScriptNET.ContextItem)">
            <summary>
            Cleans Scope (Removes items)
            </summary>
            <param name="cleanType">Type of cleanup</param>
        </member>
        <member name="M:ScriptNET.IScriptScope.AddFunctionDefinition(System.String,ScriptNET.IInvokable)">
            <summary>
            Adds function definition
            </summary>
            <param name="name">Name</param>
            <param name="funcObject">Invokable object</param>
        </member>
        <member name="M:ScriptNET.IScriptScope.GetFunctionDefinition(System.String)">
            <summary>
            Gets Invokable object (Function) by a given name
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:ScriptNET.IScriptScope.GetAllItems">
            <summary>
            Returns all items in the given context
            </summary>
            <returns>all items</returns>
        </member>
        <member name="P:ScriptNET.IScriptScope.Name">
            <summary>
            Name of the scope
            </summary>
        </member>
        <member name="P:ScriptNET.IScriptScope.Parent">
            <summary>
            Parent scope
            </summary>
        </member>
        <member name="F:ScriptNET.Debugger.frmDebugger.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ScriptNET.Debugger.frmDebugger.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ScriptNET.Debugger.frmDebugger.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ScriptNET.IScriptContext">
            <summary>
            Base interface for Script Context obect.
            ScriptContext object stores run-time information during script's execution
            This information containts:
               Scopes - which stores variables, types and functions
               Execution Flow Flags - break, return, continue
               
            ScriptContext objects also evaluates operators
            </summary>
        </member>
        <member name="M:ScriptNET.IScriptContext.EvaluateOperator(System.String,ScriptNET.ScriptValueObject,ScriptNET.ScriptValueObject)">
            <summary>
            Evaluates binary operator
            </summary>
            <param name="oper">one of: +,-,*,/,%,^,|,is,==,>=,></param>
            <param name="left">left value</param>
            <param name="right">right value</param>
            <returns>result of (left oper right)</returns>
        </member>
        <member name="M:ScriptNET.IScriptContext.EvaluateUnaryOperator(System.String,ScriptNET.ScriptValueObject)">
            <summary>
            Evaluates unary operator
            </summary>
            <param name="oper">one of: -,!,~,--,++</param>
            <param name="value">value</param>
            <returns>result of applying unary opeartor</returns>
        </member>
        <member name="M:ScriptNET.IScriptContext.CreateScope">
            <summary>
            Create scope
            </summary>
        </member>
        <member name="M:ScriptNET.IScriptContext.CreateScope(ScriptNET.IScriptScope)">
            <summary>
            Add given scope to hierarchy
            </summary>
            <param name="scope">new scope</param>
        </member>
        <member name="M:ScriptNET.IScriptContext.RemoveLocalScope">
            <summary>
            Removes local scope
            </summary>
        </member>
        <member name="M:ScriptNET.IScriptContext.GetItem(System.String,ScriptNET.ContextItem)">
            <summary>
            Returns item from scope
            </summary>
            <param name="id">name</param>
            <param name="contextItemType">type</param>
            <returns>value</returns>
        </member>
        <member name="M:ScriptNET.IScriptContext.SetItem(System.String,ScriptNET.ContextItem,System.Object)">
            <summary>
            Sets item to scope
            </summary>
            <param name="id">name</param>
            <param name="contextItemType">type</param>
            <param name="value">value</param>
        </member>
        <member name="M:ScriptNET.IScriptContext.AddFunctionDefinition(System.String,ScriptNET.IInvokable)">
            <summary>
            Adds function definition to scope
            </summary>
            <param name="name">name</param>
            <param name="funcObject">function object</param>
        </member>
        <member name="M:ScriptNET.IScriptContext.GetFunctionDefinition(System.String)">
            <summary>
            Finds function definition
            </summary>
            <param name="name">name</param>
            <returns>function object</returns>
        </member>
        <member name="P:ScriptNET.IScriptContext.Scope">
            <summary>
            Current scope
            </summary>
        </member>
        <member name="P:ScriptNET.IScriptContext.Debugger">
            <summary>
            Script debugger
            </summary>
        </member>
        <member name="P:ScriptNET.IScriptContext.SourceCode">
            <summary>
            Source code
            </summary>
        </member>
        <member name="P:ScriptNET.IScriptContext.Result">
            <summary>
            Result of script execution
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptSwitchDefaultStatement">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptSwitchCaseStatement">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFunctionCall">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFuncContractPre">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptArrayConstructor">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptValueObject">
            <summary>
            Represents results of script evaluation
            </summary>
        </member>
        <member name="P:ScriptNET.ScriptValueObject.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptScope">
            <summary>
            Script Scope represents a tree of local scopes.
            Scopes stores variables and types tables.
            
            Run-time queries ScriptScope through ScriptContext for:
            <list type="bullet">
              <item>Resolving names of types and variables;</item>
              <item>Resolving names of functions;</item>
              <item>Adding new function into scope;</item>
              <item>Assigning values to variables.</item>
            </list>
            </summary>
        </member>
        <member name="M:ScriptNET.ScriptScope.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ScriptNET.ScriptScope.#ctor(ScriptNET.IScriptScope)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent scope</param>
        </member>
        <member name="M:ScriptNET.ScriptScope.#ctor(ScriptNET.ScriptScope,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent Scope</param>
            <param name="name">Name of Scope</param>
        </member>
        <member name="M:ScriptNET.ScriptScope.DeepLookup(System.String)">
            <summary>
            Searches all loaded assemblies for a given ID
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:ScriptNET.ScriptScope.GetAllItems">
            <summary>
            Returns all items in the given context
            </summary>
            <returns>all items</returns>
        </member>
        <member name="M:ScriptNET.ScriptScope.GetVariable(System.String)">
            <summary>
            Returns value of the variable. Throws ScriptIdNotFoundException
            </summary>
            <param name="id">Variable ID</param>
            <returns>Value of the variable</returns>
        </member>
        <member name="M:ScriptNET.ScriptScope.GetTypeById(System.String)">
            <summary>
            Returns Type by given ID
            </summary>
            <param name="id">type's id</param>
            <returns>type</returns>
        </member>
        <member name="M:ScriptNET.ScriptScope.GetItem(System.String,ScriptNET.ContextItem)">
            <summary>
            Returns Item: variable or type
            </summary>
            <param name="id">id of item</param>
            <param name="contextItemType">type of item</param>
            <returns>value of given ID</returns>
        </member>
        <member name="M:ScriptNET.ScriptScope.SetItem(System.String,ScriptNET.ContextItem,System.Object)">
            <summary>
            Sets Item: variable or type
            </summary>
            <param name="id">item's id</param>
            <param name="contextItemType">type of item</param>
            <param name="value">value</param>
        </member>
        <member name="M:ScriptNET.ScriptScope.Clean(ScriptNET.ContextItem)">
            <summary>
            Cleans Scope (Removes items)
            </summary>
            <param name="cleanType">Type of cleanup</param>
        </member>
        <member name="M:ScriptNET.ScriptScope.AddFunctionDefinition(System.String,ScriptNET.IInvokable)">
            <summary>
            Adds function definition
            </summary>
            <param name="name">Name</param>
            <param name="funcObject">Invokable object</param>
        </member>
        <member name="M:ScriptNET.ScriptScope.GetFunctionDefinition(System.String)">
            <summary>
            Gets Invokable object (Function) by a given name
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="P:ScriptNET.ScriptScope.Name">
            <summary>
            The Unique name of the scope withing scopes tree.
            </summary>
        </member>
        <member name="P:ScriptNET.ScriptScope.Parent">
            <summary>
            Parent Scope of the current scope. 
            Null if this scope is a global (root).
            </summary>
        </member>
        <member name="T:ScriptNET.Script">
            <summary>
            Compiled script
            </summary>
        </member>
        <member name="M:ScriptNET.Script.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ScriptNET.Script.#ctor(ScriptNET.IScriptContext)">
            <summary>
            Script Constructor
            </summary>
            <param name="Context">Context in which script will execute</param>
        </member>
        <member name="M:ScriptNET.Script.Execute">
            <summary>
            Executes current script returning result
            </summary>
            <returns>result of execution</returns>
        </member>
        <member name="M:ScriptNET.Script.Code(ScriptNET.ScriptAst)">
            <summary>
            Returns source code for given node
            </summary>
            <param name="node">Node</param>
            <returns>source code</returns>
        </member>
        <member name="M:ScriptNET.Script.Compile(System.String)">
            <summary>
            Compiles Script.NET code into AST representation
            </summary>
            <param name="code">Code string</param>
            <returns>Compiled Script. Throws Script Exception on Syntax Errors</returns>
        </member>
        <member name="M:ScriptNET.Script.RunCode(System.String)">
            <summary>
            Executes script code
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:ScriptNET.Script.RunCode(System.String,ScriptNET.IScriptContext)">
            <summary>
            Executes script code in the given context
            </summary>
            <param name="code"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ScriptNET.Script.DebugCode(System.String)">
            <summary>
            Debugs a peace of code
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:ScriptNET.Script.DebugCode(System.String,ScriptNET.IScriptContext)">
            <summary>
            Debugs code in a given Context
            </summary>
            <param name="code"></param>
            <param name="context"></param>
        </member>
        <member name="M:ScriptNET.Script.Parse(System.String)">
            <summary>
            Parses code
            </summary>
            <param name="code">Script code</param>
            <returns>AstNode or throws:ArgumentException, ScriptSyntaxErrorException</returns>
        </member>
        <member name="P:ScriptNET.Script.Ast">
            <summary>
            Ast of the given Source Code
            </summary>
        </member>
        <member name="P:ScriptNET.Script.SourceCode">
            <summary>
            Code of the script
            </summary>
        </member>
        <member name="P:ScriptNET.Script.Context">
            <summary>
            Execution context
            </summary>
        </member>
        <member name="P:ScriptNET.Script.SyntaxTree">
            <summary>
            String representing syntax tree
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptQualifiedName">
            <summary>
            Qualified Name
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptProg">
            <summary>
            Root of any script program
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptExprList">
            <summary>
            Script Array Expression List Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptTryCatchFinallyStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptSwitchStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptUnaryExpr">
            <summary>
            Unary Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFuncContractInv">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.InvokableMethod">
            <summary>
            Wraps class Method into Invokable object. 
            So, it may be added to Script Scope as FunctionDefinition and
            Invoked in script
            It is used for implementing Using Construct
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFunctionDefExpression">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptIsExpr">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptBinExpr">
            <summary>
            Binary Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFuncContract">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFunctionDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptContext">
            <summary>
            Base implementation of ScriptContext object
            </summary>
        </member>
        <member name="M:ScriptNET.ScriptContext.#ctor">
            <summary>
            Creates new Script Context with Default scope
            </summary>
        </member>
        <member name="M:ScriptNET.ScriptContext.CreateScope">
            <summary>
            Creates new default nested scope
            </summary>
        </member>
        <member name="M:ScriptNET.ScriptContext.CreateScope(ScriptNET.IScriptScope)">
            <summary>
            Replace existing scope with new one
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:ScriptNET.ScriptContext.RemoveLocalScope">
            <summary>
            Remove Local Scope
            </summary>
        </member>
        <member name="M:ScriptNET.ScriptContext.EvaluateOperator(System.String,ScriptNET.ScriptValueObject,ScriptNET.ScriptValueObject)">
            <summary>
            Evaluates operator
            </summary>
            <param name="oper">operator symbol</param>
            <param name="left">left argument</param>
            <param name="right">right arument</param>
            <returns>result of execution</returns>
            <exception cref="T:ScriptNET.ScriptException"></exception>
        </member>
        <member name="M:ScriptNET.ScriptContext.EvaluateUnaryOperator(System.String,ScriptNET.ScriptValueObject)">
            <summary>
            Evaluates Unary operator
            </summary>
            <param name="oper">Operator symbol</param>
            <param name="value">value</param>
            <returns>result</returns>
        </member>
        <member name="M:ScriptNET.ScriptContext.SetReturn(System.Boolean)">
            <summary>
            Set return state of run-time
            </summary>
            <param name="val">true or false</param>
        </member>
        <member name="M:ScriptNET.ScriptContext.SetBreak(System.Boolean)">
            <summary>
            Set break state of run-time
            </summary>
            <param name="val">true or false</param>
        </member>
        <member name="M:ScriptNET.ScriptContext.SetContinue(System.Boolean)">
            <summary>
            Set continue state of run-time
            </summary>
            <param name="val">true or false</param>
        </member>
        <member name="M:ScriptNET.ScriptContext.IsReturn">
            <summary>
            Return state
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:ScriptNET.ScriptContext.IsBreak">
            <summary>
            Break state
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:ScriptNET.ScriptContext.IsContinue">
            <summary>
            Continue state
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:ScriptNET.ScriptContext.AddFunctionDefinition(System.String,ScriptNET.IInvokable)">
            <summary>
            Adds new function definition to current scope
            </summary>
            <param name="name">Name of function</param>
            <param name="funcObject">IInvokable object which represents function</param>
        </member>
        <member name="M:ScriptNET.ScriptContext.GetFunctionDefinition(System.String)">
            <summary>
            Finds function definition in current scope
            </summary>
            <param name="name">function name</param>
            <returns>IInvokable object</returns>
        </member>
        <member name="P:ScriptNET.ScriptContext.Scope">
            <summary>
            Scope object
            </summary>
        </member>
        <member name="P:ScriptNET.ScriptContext.Debugger">
            <summary>
            Script debugger
            </summary>
        </member>
        <member name="P:ScriptNET.ScriptContext.SourceCode">
            <summary>
            Script source code. Should be provided before executing the script
            </summary>
        </member>
        <member name="P:ScriptNET.ScriptContext.Result">
            <summary>
            Script Result object
            </summary>
        </member>
        <member name="T:ScriptNET.ContextItem">
            <summary>
            Items that may be stored in Context tables
            </summary>
        </member>
        <member name="F:ScriptNET.ContextItem.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="F:ScriptNET.ContextItem.Type">
            <summary>
            Type definition
            </summary>
        </member>
        <member name="F:ScriptNET.ContextItem.All">
            <summary>
            Variable, Type or Function
            </summary>
        </member>
        <member name="T:ScriptNET.ContextFlags">
            <summary>
            Specify context state
            </summary>
        </member>
        <member name="F:ScriptNET.ContextFlags.Empty">
            <summary>
            Initial state
            </summary>
        </member>
        <member name="F:ScriptNET.ContextFlags.Break">
            <summary>
            Brake operator executed
            </summary>
        </member>
        <member name="F:ScriptNET.ContextFlags.Continue">
            <summary>
            Continue operator executed
            </summary>    
        </member>
        <member name="F:ScriptNET.ContextFlags.Return">
            <summary>
            Return statement executed
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFuncParameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:ScriptNET.IScriptDebugger.Start(System.String)">
            <summary>
            Occurs before exectuion of the programm
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:ScriptNET.IScriptDebugger.Step(System.String,Irony.Compiler.AstNode,ScriptNET.IScriptContext)">
            <summary>
            Occurs before exection of CurrentNode
            </summary>
            <param name="code"></param>
            <param name="CurrentNode"></param>
            <param name="Context"></param>
        </member>
        <member name="M:ScriptNET.IScriptDebugger.Update(System.String,Irony.Compiler.AstNode,ScriptNET.IScriptContext)">
            <summary>
            Occurs after execution of CurrentNode
            </summary>
            <param name="code"></param>
            <param name="CurrentNode"></param>
            <param name="Context"></param>
        </member>
        <member name="M:ScriptNET.IScriptDebugger.Stop(ScriptNET.ScriptContext)">
            <summary>
            Stops debugging
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptAstTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptUsingStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptCondition">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="P:ScriptNET.ScriptCondition.Expression">
            <summary>
            Returns condition
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptAssignExpr">
            <summary>
            Assignment Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptWhileStatement">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptNewStmt">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.Runtime.ScriptContractScope">
            <summary>
            Scope with contracts on variables
            </summary>
        </member>
        <member name="M:ScriptNET.Runtime.ScriptContractScope.#ctor(ScriptNET.IScriptContext,ScriptNET.IScriptScope)">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ScriptNET.Runtime.ScriptContractScope.SetItem(System.String,ScriptNET.ContextItem,System.Object)">
            <summary>
            Checks Invariant conditions for variable and call sets value
            </summary>
            <param name="id"></param>
            <param name="contextItemType"></param>
            <param name="value"></param>
        </member>
        <member name="M:ScriptNET.Runtime.ScriptContractScope.AddContract(ScriptNET.ScriptFuncContract)">
            <summary>
            Adds new FunctionContract to the list of contracts in scope
            </summary>
            <param name="contract"></param>
        </member>
        <member name="M:ScriptNET.Runtime.ScriptContractScope.CheckInvariantCondition">
            <summary>
            Check conditions
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptIfStatement">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptGenericsPostfix">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptForEachStatement">
            <summary>
            ForEachStatement
            </summary>
        </member>
        <member name="T:ScriptNET.CustomFunctions.AboutFunc">
            <summary>
            About function
            </summary>
        </member>
        <member name="F:ScriptNET.CustomFunctions.AboutFunc.FunctionDefinition">
            <summary>
            Function instance
            </summary>
        </member>
        <member name="F:ScriptNET.CustomFunctions.AboutFunc.FunctionName">
            <summary>
            Function Name
            </summary>
        </member>
        <member name="M:ScriptNET.CustomFunctions.AboutFunc.CanInvoke">
            <summary>
            
            </summary>
            <returns>Always true</returns>
        </member>
        <member name="M:ScriptNET.CustomFunctions.AboutFunc.Invoke(ScriptNET.IScriptContext,System.Object[])">
            <summary>
            Executes function
            </summary>
            <param name="Context"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:ScriptNET.ScriptMObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptFuncContractPost">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptConstExpr">
            <summary>
            Constant Expression
            </summary>
        </member>
        <member name="P:ScriptNET.ScriptConstExpr.Value">
            <summary>
            Value of the constant
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptElements">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptTypeExpr">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptTypeConstructor">
            <summary>
            Script Array Constructor Expression
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptMObjectPart">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptdotnetGrammar">
            <summary>
            This class represents Irony Grammar for Script.NET
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptForStatement">
            <summary>
            For statement
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptArrayResolution">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptNewArrStmt">
            <summary>
            
            </summary>
        </member>
        <member name="T:ScriptNET.ScriptMetaExpr">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
