//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Sooda.SoodaObjectsAssembly(typeof(NGinn.Engine.Dao._DatabaseSchema))]

namespace NGinn.Engine.Dao {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using NGinnEngineDaoStubs = NGinn.Engine.Dao.Stubs;
  
  public class ProcessDefinitionDbList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.ProcessDefinitionDb> {
    public ProcessDefinitionDbList() {
    }
    public ProcessDefinitionDbList(ISoodaObjectList list) : 
        base(list) {
    }
    public new ProcessDefinitionDb this[int pos] {
      get {
        return ((ProcessDefinitionDb)(base.GetItem(pos)));
      }
    }
    public int Add(ProcessDefinitionDb obj) {
      return base.Add2(obj);
    }
    public void Remove(ProcessDefinitionDb obj) {
      base.Remove2(obj);
    }
    public bool Contains(ProcessDefinitionDb obj) {
      return base.Contains2(obj);
    }
    public ProcessDefinitionDbList Sort(IComparer comparer) {
      return new ProcessDefinitionDbList(base.Sort2(comparer));
    }
    public ProcessDefinitionDbList Sort(string sortOrder) {
      return new ProcessDefinitionDbList(base.Sort2(sortOrder));
    }
    public ProcessDefinitionDbList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new ProcessDefinitionDbList(base.Sort2(sortExpression));
    }
    public ProcessDefinitionDbList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new ProcessDefinitionDbList(base.Sort2(sortExpression, sortOrder));
    }
    public ProcessDefinitionDbList SelectFirst(int count) {
      return new ProcessDefinitionDbList(base.SelectFirst2(count));
    }
    public ProcessDefinitionDbList SelectLast(int count) {
      return new ProcessDefinitionDbList(base.SelectLast2(count));
    }
    public ProcessDefinitionDbList SelectRange(int _from, int _to) {
      return new ProcessDefinitionDbList(base.SelectRange2(_from, _to));
    }
    public ProcessDefinitionDbList Filter(SoodaObjectFilter f) {
      return new ProcessDefinitionDbList(base.Filter2(f));
    }
    public ProcessDefinitionDbList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new ProcessDefinitionDbList(base.Filter2(sortExpression));
    }
    public ProcessDefinitionDbList Filter(SoodaWhereClause whereClause) {
      return new ProcessDefinitionDbList(base.Filter2(whereClause));
    }
    public ProcessDefinitionDbList GetSnapshot() {
      return new ProcessDefinitionDbList(base.GetSnapshot2());
    }
  }
  public class ProcessInstanceDbList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.ProcessInstanceDb> {
    public ProcessInstanceDbList() {
    }
    public ProcessInstanceDbList(ISoodaObjectList list) : 
        base(list) {
    }
    public new ProcessInstanceDb this[int pos] {
      get {
        return ((ProcessInstanceDb)(base.GetItem(pos)));
      }
    }
    public int Add(ProcessInstanceDb obj) {
      return base.Add2(obj);
    }
    public void Remove(ProcessInstanceDb obj) {
      base.Remove2(obj);
    }
    public bool Contains(ProcessInstanceDb obj) {
      return base.Contains2(obj);
    }
    public ProcessInstanceDbList Sort(IComparer comparer) {
      return new ProcessInstanceDbList(base.Sort2(comparer));
    }
    public ProcessInstanceDbList Sort(string sortOrder) {
      return new ProcessInstanceDbList(base.Sort2(sortOrder));
    }
    public ProcessInstanceDbList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new ProcessInstanceDbList(base.Sort2(sortExpression));
    }
    public ProcessInstanceDbList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new ProcessInstanceDbList(base.Sort2(sortExpression, sortOrder));
    }
    public ProcessInstanceDbList SelectFirst(int count) {
      return new ProcessInstanceDbList(base.SelectFirst2(count));
    }
    public ProcessInstanceDbList SelectLast(int count) {
      return new ProcessInstanceDbList(base.SelectLast2(count));
    }
    public ProcessInstanceDbList SelectRange(int _from, int _to) {
      return new ProcessInstanceDbList(base.SelectRange2(_from, _to));
    }
    public ProcessInstanceDbList Filter(SoodaObjectFilter f) {
      return new ProcessInstanceDbList(base.Filter2(f));
    }
    public ProcessInstanceDbList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new ProcessInstanceDbList(base.Filter2(sortExpression));
    }
    public ProcessInstanceDbList Filter(SoodaWhereClause whereClause) {
      return new ProcessInstanceDbList(base.Filter2(whereClause));
    }
    public ProcessInstanceDbList GetSnapshot() {
      return new ProcessInstanceDbList(base.GetSnapshot2());
    }
  }
  public class ProcessStatusList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.ProcessStatus> {
    public ProcessStatusList() {
    }
    public ProcessStatusList(ISoodaObjectList list) : 
        base(list) {
    }
    public new ProcessStatus this[int pos] {
      get {
        return ((ProcessStatus)(base.GetItem(pos)));
      }
    }
    public int Add(ProcessStatus obj) {
      return base.Add2(obj);
    }
    public void Remove(ProcessStatus obj) {
      base.Remove2(obj);
    }
    public bool Contains(ProcessStatus obj) {
      return base.Contains2(obj);
    }
    public ProcessStatusList Sort(IComparer comparer) {
      return new ProcessStatusList(base.Sort2(comparer));
    }
    public ProcessStatusList Sort(string sortOrder) {
      return new ProcessStatusList(base.Sort2(sortOrder));
    }
    public ProcessStatusList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new ProcessStatusList(base.Sort2(sortExpression));
    }
    public ProcessStatusList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new ProcessStatusList(base.Sort2(sortExpression, sortOrder));
    }
    public ProcessStatusList SelectFirst(int count) {
      return new ProcessStatusList(base.SelectFirst2(count));
    }
    public ProcessStatusList SelectLast(int count) {
      return new ProcessStatusList(base.SelectLast2(count));
    }
    public ProcessStatusList SelectRange(int _from, int _to) {
      return new ProcessStatusList(base.SelectRange2(_from, _to));
    }
    public ProcessStatusList Filter(SoodaObjectFilter f) {
      return new ProcessStatusList(base.Filter2(f));
    }
    public ProcessStatusList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new ProcessStatusList(base.Filter2(sortExpression));
    }
    public ProcessStatusList Filter(SoodaWhereClause whereClause) {
      return new ProcessStatusList(base.Filter2(whereClause));
    }
    public ProcessStatusList GetSnapshot() {
      return new ProcessStatusList(base.GetSnapshot2());
    }
  }
  public class TokenDbList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.TokenDb> {
    public TokenDbList() {
    }
    public TokenDbList(ISoodaObjectList list) : 
        base(list) {
    }
    public new TokenDb this[int pos] {
      get {
        return ((TokenDb)(base.GetItem(pos)));
      }
    }
    public int Add(TokenDb obj) {
      return base.Add2(obj);
    }
    public void Remove(TokenDb obj) {
      base.Remove2(obj);
    }
    public bool Contains(TokenDb obj) {
      return base.Contains2(obj);
    }
    public TokenDbList Sort(IComparer comparer) {
      return new TokenDbList(base.Sort2(comparer));
    }
    public TokenDbList Sort(string sortOrder) {
      return new TokenDbList(base.Sort2(sortOrder));
    }
    public TokenDbList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new TokenDbList(base.Sort2(sortExpression));
    }
    public TokenDbList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new TokenDbList(base.Sort2(sortExpression, sortOrder));
    }
    public TokenDbList SelectFirst(int count) {
      return new TokenDbList(base.SelectFirst2(count));
    }
    public TokenDbList SelectLast(int count) {
      return new TokenDbList(base.SelectLast2(count));
    }
    public TokenDbList SelectRange(int _from, int _to) {
      return new TokenDbList(base.SelectRange2(_from, _to));
    }
    public TokenDbList Filter(SoodaObjectFilter f) {
      return new TokenDbList(base.Filter2(f));
    }
    public TokenDbList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new TokenDbList(base.Filter2(sortExpression));
    }
    public TokenDbList Filter(SoodaWhereClause whereClause) {
      return new TokenDbList(base.Filter2(whereClause));
    }
    public TokenDbList GetSnapshot() {
      return new TokenDbList(base.GetSnapshot2());
    }
  }
  public class ActiveTransitionList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.ActiveTransition> {
    public ActiveTransitionList() {
    }
    public ActiveTransitionList(ISoodaObjectList list) : 
        base(list) {
    }
    public new ActiveTransition this[int pos] {
      get {
        return ((ActiveTransition)(base.GetItem(pos)));
      }
    }
    public int Add(ActiveTransition obj) {
      return base.Add2(obj);
    }
    public void Remove(ActiveTransition obj) {
      base.Remove2(obj);
    }
    public bool Contains(ActiveTransition obj) {
      return base.Contains2(obj);
    }
    public ActiveTransitionList Sort(IComparer comparer) {
      return new ActiveTransitionList(base.Sort2(comparer));
    }
    public ActiveTransitionList Sort(string sortOrder) {
      return new ActiveTransitionList(base.Sort2(sortOrder));
    }
    public ActiveTransitionList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new ActiveTransitionList(base.Sort2(sortExpression));
    }
    public ActiveTransitionList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new ActiveTransitionList(base.Sort2(sortExpression, sortOrder));
    }
    public ActiveTransitionList SelectFirst(int count) {
      return new ActiveTransitionList(base.SelectFirst2(count));
    }
    public ActiveTransitionList SelectLast(int count) {
      return new ActiveTransitionList(base.SelectLast2(count));
    }
    public ActiveTransitionList SelectRange(int _from, int _to) {
      return new ActiveTransitionList(base.SelectRange2(_from, _to));
    }
    public ActiveTransitionList Filter(SoodaObjectFilter f) {
      return new ActiveTransitionList(base.Filter2(f));
    }
    public ActiveTransitionList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new ActiveTransitionList(base.Filter2(sortExpression));
    }
    public ActiveTransitionList Filter(SoodaWhereClause whereClause) {
      return new ActiveTransitionList(base.Filter2(whereClause));
    }
    public ActiveTransitionList GetSnapshot() {
      return new ActiveTransitionList(base.GetSnapshot2());
    }
  }
}
namespace NGinn.Engine.Dao.Stubs {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using Sooda.ObjectMapper;
  using NGinnEngineDao = NGinn.Engine.Dao;
  
  public class ProcessDefinitionDb_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public int Id;
    public string Name;
    public int Version;
    public string FullName;
    public string ProcessXml;
    public ProcessDefinitionDb_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public ProcessDefinitionDb_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new ProcessDefinitionDb_Values(this);
    }
  }
  public class ProcessDefinitionDb_Stub : SoodaObject {
    private static IPrimaryKeyGenerator keyGenerator = new Sooda.ObjectMapper.KeyGenerators.TableBasedGenerator("ProcessDefinitionDb", NGinnEngineDao._DatabaseSchema.GetSchema().GetDataSourceInfo("default"));
    public ProcessDefinitionDb_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public ProcessDefinitionDb_Stub(SoodaConstructor c) : 
        base(c) {
    }
    public int Id {
      get {
        return ((int)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(202)]
    public string Name {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).Name;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Name", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Name), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Name));
      }
    }
    public int Version {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).Version;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Version", 2, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Version), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Version));
      }
    }
    [Sooda.SoodaFieldSizeAttribute(202)]
    public string FullName {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).FullName;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "FullName", 3, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_FullName), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_FullName));
      }
    }
    [Sooda.SoodaFieldSizeAttribute(10000)]
    public string ProcessXml {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).ProcessXml;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "ProcessXml", 4, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_ProcessXml), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_ProcessXml));
      }
    }
    private ProcessDefinitionDb_Values GetProcessDefinitionDbFieldValuesForRead(int requiredTable) {
      return ((ProcessDefinitionDb_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new ProcessDefinitionDb_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return ProcessDefinitionDb_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return ProcessDefinitionDb_Factory.InternalGetFieldHandler(ordinal);
    }
    public static IPrimaryKeyGenerator GetKeyGenerator() {
      return keyGenerator;
    }
    protected override void InitNewObject() {
      this.SetPrimaryKeyValue(GetKeyGenerator().GetNextKeyValue());
    }
    public static ProcessDefinitionDb LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDb LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDb LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDb LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDbList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static ProcessDefinitionDbList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new ProcessDefinitionDbList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, ProcessDefinitionDb_Factory.TheClassInfo));
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessDefinitionDb Load(int id) {
      return Load(SoodaTransaction.ActiveTransaction, id);
    }
    public static ProcessDefinitionDb Load(SoodaTransaction tran, int id) {
      ProcessDefinitionDb retVal = ProcessDefinitionDb_Stub.GetRef(tran, id);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static ProcessDefinitionDb GetRef(int id) {
      return GetRef(SoodaTransaction.ActiveTransaction, id);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessDefinitionDb TryGet(int id) {
      return TryGet(SoodaTransaction.ActiveTransaction, id);
    }
    public static ProcessDefinitionDb GetRef(SoodaTransaction tran, int id) {
      return ((ProcessDefinitionDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessDefinitionDb_Factory.TheFactory, id)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessDefinitionDb TryGet(SoodaTransaction tran, int id) {
      return ((ProcessDefinitionDb)(tran.FindObjectWithKey("ProcessDefinitionDb", id, typeof(ProcessDefinitionDb))));
    }
    public static ProcessDefinitionDb GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessDefinitionDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessDefinitionDb_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessDefinitionDb TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessDefinitionDb)(tran.FindObjectWithKey("ProcessDefinitionDb", tuple, typeof(ProcessDefinitionDb))));
    }
    protected virtual void BeforeFieldUpdate_Name(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Name", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Name(object oldValue, object newValue) {
      this.AfterFieldUpdate("Name", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Version(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Version", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Version(object oldValue, object newValue) {
      this.AfterFieldUpdate("Version", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_FullName(object oldValue, object newValue) {
      this.BeforeFieldUpdate("FullName", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_FullName(object oldValue, object newValue) {
      this.AfterFieldUpdate("FullName", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_ProcessXml(object oldValue, object newValue) {
      this.BeforeFieldUpdate("ProcessXml", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_ProcessXml(object oldValue, object newValue) {
      this.AfterFieldUpdate("ProcessXml", oldValue, newValue);
    }
  }
  public class ProcessInstanceDb_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public string InstanceId;
    public string DefinitionId;
    public System.Data.SqlTypes.SqlInt32 Status;
    public byte[] InstanceData;
    public int RecordVersion;
    public System.DateTime CreatedDate;
    public System.Data.SqlTypes.SqlDateTime FinishedDate;
    public System.DateTime LastModified;
    public int RetryCount;
    public System.Data.SqlTypes.SqlString ErrorInfo;
    public System.Data.SqlTypes.SqlDateTime NextRetry;
    public ProcessInstanceDb_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public ProcessInstanceDb_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new ProcessInstanceDb_Values(this);
    }
  }
  public class ProcessInstanceDb_Stub : SoodaObject {
    private SoodaObject[] _refcache = new Sooda.SoodaObject[1];
    public ProcessInstanceDb_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public ProcessInstanceDb_Stub(SoodaConstructor c) : 
        base(c) {
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string InstanceId {
      get {
        return ((string)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string DefinitionId {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).DefinitionId;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "DefinitionId", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_DefinitionId), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_DefinitionId));
      }
    }
    public ProcessStatus Status {
      get {
        if ((this._refcache[0] == null)) {
          if ((this.GetProcessInstanceDbFieldValuesForRead(0).Status.IsNull == false)) {
            this._refcache[0] = ProcessStatus_Stub.GetRef(this.GetTransaction(), this.GetProcessInstanceDbFieldValuesForRead(0).Status.Value);
          }
        }
        return ((ProcessStatus)(this._refcache[0]));
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetRefFieldValue(this, 0, "Status", 2, value, this._refcache, 0, ProcessStatus_Factory.TheFactory);
      }
    }
    public byte[] InstanceData {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).InstanceData;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "InstanceData", 3, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_InstanceData), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_InstanceData));
      }
    }
    public int RecordVersion {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).RecordVersion;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "RecordVersion", 4, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_RecordVersion), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_RecordVersion));
      }
    }
    public System.DateTime CreatedDate {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).CreatedDate;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "CreatedDate", 5, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_CreatedDate), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_CreatedDate));
      }
    }
    public System.Data.SqlTypes.SqlDateTime FinishedDate {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).FinishedDate;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "FinishedDate", 6, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_FinishedDate), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_FinishedDate));
      }
    }
    public System.DateTime LastModified {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).LastModified;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "LastModified", 7, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_LastModified), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_LastModified));
      }
    }
    public int RetryCount {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).RetryCount;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "RetryCount", 8, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_RetryCount), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_RetryCount));
      }
    }
    public System.Data.SqlTypes.SqlString ErrorInfo {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).ErrorInfo;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "ErrorInfo", 9, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_ErrorInfo), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_ErrorInfo));
      }
    }
    public System.Data.SqlTypes.SqlDateTime NextRetry {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).NextRetry;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "NextRetry", 10, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_NextRetry), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_NextRetry));
      }
    }
    private ProcessInstanceDb_Values GetProcessInstanceDbFieldValuesForRead(int requiredTable) {
      return ((ProcessInstanceDb_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new ProcessInstanceDb_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return ProcessInstanceDb_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return ProcessInstanceDb_Factory.InternalGetFieldHandler(ordinal);
    }
    public static ProcessInstanceDb LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDb LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDb LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDb LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDbList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static ProcessInstanceDbList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new ProcessInstanceDbList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, ProcessInstanceDb_Factory.TheClassInfo));
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessInstanceDb Load(string instanceId) {
      return Load(SoodaTransaction.ActiveTransaction, instanceId);
    }
    public static ProcessInstanceDb Load(SoodaTransaction tran, string instanceId) {
      ProcessInstanceDb retVal = ProcessInstanceDb_Stub.GetRef(tran, instanceId);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static ProcessInstanceDb GetRef(string instanceId) {
      return GetRef(SoodaTransaction.ActiveTransaction, instanceId);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessInstanceDb TryGet(string instanceId) {
      return TryGet(SoodaTransaction.ActiveTransaction, instanceId);
    }
    public static ProcessInstanceDb GetRef(SoodaTransaction tran, string instanceId) {
      return ((ProcessInstanceDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessInstanceDb_Factory.TheFactory, instanceId)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessInstanceDb TryGet(SoodaTransaction tran, string instanceId) {
      return ((ProcessInstanceDb)(tran.FindObjectWithKey("ProcessInstanceDb", instanceId, typeof(ProcessInstanceDb))));
    }
    public static ProcessInstanceDb GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessInstanceDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessInstanceDb_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessInstanceDb TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessInstanceDb)(tran.FindObjectWithKey("ProcessInstanceDb", tuple, typeof(ProcessInstanceDb))));
    }
    protected virtual void BeforeFieldUpdate_DefinitionId(object oldValue, object newValue) {
      this.BeforeFieldUpdate("DefinitionId", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_DefinitionId(object oldValue, object newValue) {
      this.AfterFieldUpdate("DefinitionId", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Status(ProcessStatus oldValue, ProcessStatus newValue) {
      this.BeforeFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Status(ProcessStatus oldValue, ProcessStatus newValue) {
      this.AfterFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_InstanceData(object oldValue, object newValue) {
      this.BeforeFieldUpdate("InstanceData", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_InstanceData(object oldValue, object newValue) {
      this.AfterFieldUpdate("InstanceData", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.BeforeFieldUpdate("RecordVersion", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.AfterFieldUpdate("RecordVersion", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_CreatedDate(object oldValue, object newValue) {
      this.BeforeFieldUpdate("CreatedDate", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_CreatedDate(object oldValue, object newValue) {
      this.AfterFieldUpdate("CreatedDate", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_FinishedDate(object oldValue, object newValue) {
      this.BeforeFieldUpdate("FinishedDate", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_FinishedDate(object oldValue, object newValue) {
      this.AfterFieldUpdate("FinishedDate", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_LastModified(object oldValue, object newValue) {
      this.BeforeFieldUpdate("LastModified", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_LastModified(object oldValue, object newValue) {
      this.AfterFieldUpdate("LastModified", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_RetryCount(object oldValue, object newValue) {
      this.BeforeFieldUpdate("RetryCount", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_RetryCount(object oldValue, object newValue) {
      this.AfterFieldUpdate("RetryCount", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_ErrorInfo(object oldValue, object newValue) {
      this.BeforeFieldUpdate("ErrorInfo", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_ErrorInfo(object oldValue, object newValue) {
      this.AfterFieldUpdate("ErrorInfo", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_NextRetry(object oldValue, object newValue) {
      this.BeforeFieldUpdate("NextRetry", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_NextRetry(object oldValue, object newValue) {
      this.AfterFieldUpdate("NextRetry", oldValue, newValue);
    }
  }
  public class ProcessStatus_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public int Id;
    public string Name;
    public ProcessStatus_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public ProcessStatus_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new ProcessStatus_Values(this);
    }
  }
  public class ProcessStatus_Stub : SoodaObject {
    private static IPrimaryKeyGenerator keyGenerator = new Sooda.ObjectMapper.KeyGenerators.TableBasedGenerator("ProcessStatus", NGinnEngineDao._DatabaseSchema.GetSchema().GetDataSourceInfo("default"));
    public ProcessStatus_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public ProcessStatus_Stub(SoodaConstructor c) : 
        base(c) {
    }
    public int Id {
      get {
        return ((int)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(202)]
    public string Name {
      get {
        return this.GetProcessStatusFieldValuesForRead(0).Name;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Name", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Name), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Name));
      }
    }
    public static ProcessStatus Ready {
      get {
        return ProcessStatus_Stub.GetRef(1);
      }
    }
    public static ProcessStatus Waiting {
      get {
        return ProcessStatus_Stub.GetRef(2);
      }
    }
    public static ProcessStatus Finished {
      get {
        return ProcessStatus_Stub.GetRef(3);
      }
    }
    public static ProcessStatus Cancelled {
      get {
        return ProcessStatus_Stub.GetRef(4);
      }
    }
    public static ProcessStatus Error {
      get {
        return ProcessStatus_Stub.GetRef(5);
      }
    }
    private ProcessStatus_Values GetProcessStatusFieldValuesForRead(int requiredTable) {
      return ((ProcessStatus_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new ProcessStatus_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return ProcessStatus_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return ProcessStatus_Factory.InternalGetFieldHandler(ordinal);
    }
    public static IPrimaryKeyGenerator GetKeyGenerator() {
      return keyGenerator;
    }
    protected override void InitNewObject() {
      this.SetPrimaryKeyValue(GetKeyGenerator().GetNextKeyValue());
    }
    public static ProcessStatus LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessStatus LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((ProcessStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessStatus LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessStatus LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((ProcessStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessStatusList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static ProcessStatusList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new ProcessStatusList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, ProcessStatus_Factory.TheClassInfo));
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessStatus Load(int id) {
      return Load(SoodaTransaction.ActiveTransaction, id);
    }
    public static ProcessStatus Load(SoodaTransaction tran, int id) {
      ProcessStatus retVal = ProcessStatus_Stub.GetRef(tran, id);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static ProcessStatus GetRef(int id) {
      return GetRef(SoodaTransaction.ActiveTransaction, id);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessStatus TryGet(int id) {
      return TryGet(SoodaTransaction.ActiveTransaction, id);
    }
    public static ProcessStatus GetRef(SoodaTransaction tran, int id) {
      return ((ProcessStatus)(Sooda.SoodaObject.GetRefHelper(tran, ProcessStatus_Factory.TheFactory, id)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessStatus TryGet(SoodaTransaction tran, int id) {
      return ((ProcessStatus)(tran.FindObjectWithKey("ProcessStatus", id, typeof(ProcessStatus))));
    }
    public static ProcessStatus GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessStatus)(Sooda.SoodaObject.GetRefHelper(tran, ProcessStatus_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessStatus TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessStatus)(tran.FindObjectWithKey("ProcessStatus", tuple, typeof(ProcessStatus))));
    }
    protected virtual void BeforeFieldUpdate_Name(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Name", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Name(object oldValue, object newValue) {
      this.AfterFieldUpdate("Name", oldValue, newValue);
    }
  }
  public class TokenDb_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public string Id;
    public string ProcessInstance;
    public int Mode;
    public int Status;
    public string PlaceId;
    public int RecordVersion;
    public TokenDb_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public TokenDb_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new TokenDb_Values(this);
    }
  }
  public class TokenDb_Stub : SoodaObject {
    public TokenDb_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public TokenDb_Stub(SoodaConstructor c) : 
        base(c) {
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string Id {
      get {
        return ((string)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string ProcessInstance {
      get {
        return this.GetTokenDbFieldValuesForRead(0).ProcessInstance;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "ProcessInstance", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_ProcessInstance), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_ProcessInstance));
      }
    }
    public int Mode {
      get {
        return this.GetTokenDbFieldValuesForRead(0).Mode;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Mode", 2, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Mode), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Mode));
      }
    }
    public int Status {
      get {
        return this.GetTokenDbFieldValuesForRead(0).Status;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Status", 3, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Status), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Status));
      }
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string PlaceId {
      get {
        return this.GetTokenDbFieldValuesForRead(0).PlaceId;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "PlaceId", 4, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_PlaceId), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_PlaceId));
      }
    }
    public int RecordVersion {
      get {
        return this.GetTokenDbFieldValuesForRead(0).RecordVersion;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "RecordVersion", 5, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_RecordVersion), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_RecordVersion));
      }
    }
    private TokenDb_Values GetTokenDbFieldValuesForRead(int requiredTable) {
      return ((TokenDb_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new TokenDb_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return TokenDb_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return TokenDb_Factory.InternalGetFieldHandler(ordinal);
    }
    public static TokenDb LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDb LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDb LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDb LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDbList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static TokenDbList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new TokenDbList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, TokenDb_Factory.TheClassInfo));
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static TokenDb Load(string id) {
      return Load(SoodaTransaction.ActiveTransaction, id);
    }
    public static TokenDb Load(SoodaTransaction tran, string id) {
      TokenDb retVal = TokenDb_Stub.GetRef(tran, id);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static TokenDb GetRef(string id) {
      return GetRef(SoodaTransaction.ActiveTransaction, id);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenDb TryGet(string id) {
      return TryGet(SoodaTransaction.ActiveTransaction, id);
    }
    public static TokenDb GetRef(SoodaTransaction tran, string id) {
      return ((TokenDb)(Sooda.SoodaObject.GetRefHelper(tran, TokenDb_Factory.TheFactory, id)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenDb TryGet(SoodaTransaction tran, string id) {
      return ((TokenDb)(tran.FindObjectWithKey("TokenDb", id, typeof(TokenDb))));
    }
    public static TokenDb GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((TokenDb)(Sooda.SoodaObject.GetRefHelper(tran, TokenDb_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenDb TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((TokenDb)(tran.FindObjectWithKey("TokenDb", tuple, typeof(TokenDb))));
    }
    protected virtual void BeforeFieldUpdate_ProcessInstance(object oldValue, object newValue) {
      this.BeforeFieldUpdate("ProcessInstance", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_ProcessInstance(object oldValue, object newValue) {
      this.AfterFieldUpdate("ProcessInstance", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Mode(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Mode", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Mode(object oldValue, object newValue) {
      this.AfterFieldUpdate("Mode", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Status(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Status(object oldValue, object newValue) {
      this.AfterFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_PlaceId(object oldValue, object newValue) {
      this.BeforeFieldUpdate("PlaceId", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_PlaceId(object oldValue, object newValue) {
      this.AfterFieldUpdate("PlaceId", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.BeforeFieldUpdate("RecordVersion", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.AfterFieldUpdate("RecordVersion", oldValue, newValue);
    }
  }
  public class ActiveTransition_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public string Id;
    public string ProcessInstance;
    public string TaskId;
    public int Status;
    public System.Data.SqlTypes.SqlString DeferredChoiceId;
    public System.Data.SqlTypes.SqlDateTime EnabledDate;
    public System.Data.SqlTypes.SqlDateTime CompletedDate;
    public int RecordVersion;
    public byte[] TransitionData;
    public ActiveTransition_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public ActiveTransition_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new ActiveTransition_Values(this);
    }
  }
  public class ActiveTransition_Stub : SoodaObject {
    public ActiveTransition_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public ActiveTransition_Stub(SoodaConstructor c) : 
        base(c) {
    }
    [Sooda.SoodaFieldSizeAttribute(100)]
    public string Id {
      get {
        return ((string)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string ProcessInstance {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).ProcessInstance;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "ProcessInstance", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_ProcessInstance), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_ProcessInstance));
      }
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string TaskId {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).TaskId;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "TaskId", 2, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_TaskId), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_TaskId));
      }
    }
    public int Status {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).Status;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Status", 3, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Status), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Status));
      }
    }
    [Sooda.SoodaFieldSizeAttribute(100)]
    public System.Data.SqlTypes.SqlString DeferredChoiceId {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).DeferredChoiceId;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "DeferredChoiceId", 4, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_DeferredChoiceId), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_DeferredChoiceId));
      }
    }
    public System.Data.SqlTypes.SqlDateTime EnabledDate {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).EnabledDate;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "EnabledDate", 5, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_EnabledDate), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_EnabledDate));
      }
    }
    public System.Data.SqlTypes.SqlDateTime CompletedDate {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).CompletedDate;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "CompletedDate", 6, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_CompletedDate), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_CompletedDate));
      }
    }
    public int RecordVersion {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).RecordVersion;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "RecordVersion", 7, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_RecordVersion), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_RecordVersion));
      }
    }
    public byte[] TransitionData {
      get {
        return this.GetActiveTransitionFieldValuesForRead(0).TransitionData;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "TransitionData", 8, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_TransitionData), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_TransitionData));
      }
    }
    private ActiveTransition_Values GetActiveTransitionFieldValuesForRead(int requiredTable) {
      return ((ActiveTransition_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new ActiveTransition_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return ActiveTransition_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return ActiveTransition_Factory.InternalGetFieldHandler(ordinal);
    }
    public static ActiveTransition LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ActiveTransition)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ActiveTransition LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((ActiveTransition)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ActiveTransition LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ActiveTransition)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ActiveTransition LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((ActiveTransition)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ActiveTransitionList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static ActiveTransitionList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new ActiveTransitionList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, ActiveTransition_Factory.TheClassInfo));
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ActiveTransitionList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ActiveTransition Load(string id) {
      return Load(SoodaTransaction.ActiveTransaction, id);
    }
    public static ActiveTransition Load(SoodaTransaction tran, string id) {
      ActiveTransition retVal = ActiveTransition_Stub.GetRef(tran, id);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static ActiveTransition GetRef(string id) {
      return GetRef(SoodaTransaction.ActiveTransaction, id);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ActiveTransition TryGet(string id) {
      return TryGet(SoodaTransaction.ActiveTransaction, id);
    }
    public static ActiveTransition GetRef(SoodaTransaction tran, string id) {
      return ((ActiveTransition)(Sooda.SoodaObject.GetRefHelper(tran, ActiveTransition_Factory.TheFactory, id)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ActiveTransition TryGet(SoodaTransaction tran, string id) {
      return ((ActiveTransition)(tran.FindObjectWithKey("ActiveTransition", id, typeof(ActiveTransition))));
    }
    public static ActiveTransition GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ActiveTransition)(Sooda.SoodaObject.GetRefHelper(tran, ActiveTransition_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ActiveTransition TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ActiveTransition)(tran.FindObjectWithKey("ActiveTransition", tuple, typeof(ActiveTransition))));
    }
    protected virtual void BeforeFieldUpdate_ProcessInstance(object oldValue, object newValue) {
      this.BeforeFieldUpdate("ProcessInstance", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_ProcessInstance(object oldValue, object newValue) {
      this.AfterFieldUpdate("ProcessInstance", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_TaskId(object oldValue, object newValue) {
      this.BeforeFieldUpdate("TaskId", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_TaskId(object oldValue, object newValue) {
      this.AfterFieldUpdate("TaskId", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Status(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Status(object oldValue, object newValue) {
      this.AfterFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_DeferredChoiceId(object oldValue, object newValue) {
      this.BeforeFieldUpdate("DeferredChoiceId", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_DeferredChoiceId(object oldValue, object newValue) {
      this.AfterFieldUpdate("DeferredChoiceId", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_EnabledDate(object oldValue, object newValue) {
      this.BeforeFieldUpdate("EnabledDate", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_EnabledDate(object oldValue, object newValue) {
      this.AfterFieldUpdate("EnabledDate", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_CompletedDate(object oldValue, object newValue) {
      this.BeforeFieldUpdate("CompletedDate", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_CompletedDate(object oldValue, object newValue) {
      this.AfterFieldUpdate("CompletedDate", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.BeforeFieldUpdate("RecordVersion", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.AfterFieldUpdate("RecordVersion", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_TransitionData(object oldValue, object newValue) {
      this.BeforeFieldUpdate("TransitionData", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_TransitionData(object oldValue, object newValue) {
      this.AfterFieldUpdate("TransitionData", oldValue, newValue);
    }
  }
  [SoodaObjectFactoryAttribute("ProcessDefinitionDb", typeof(ProcessDefinitionDb))]
  public class ProcessDefinitionDb_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
    private static ProcessDefinitionDb_Factory _theFactory = new ProcessDefinitionDb_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("ProcessDefinitionDb");
    private static Type _theType = typeof(ProcessDefinitionDb);
    static ProcessDefinitionDb_Factory() {
      _fieldHandlers = new SoodaFieldHandler[5];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[2] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[3] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[4] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
    }
    public ProcessDefinitionDb_Factory() {
    }
    public static ProcessDefinitionDb_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return ProcessDefinitionDb_Stub.GetRef(tran, ((int)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return ProcessDefinitionDb_Stub.TryGet(tran, ((int)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return ProcessDefinitionDb_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new ProcessDefinitionDb(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      ProcessDefinitionDb retVal = new ProcessDefinitionDb(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  [SoodaObjectFactoryAttribute("ProcessInstanceDb", typeof(ProcessInstanceDb))]
  public class ProcessInstanceDb_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
    private static ProcessInstanceDb_Factory _theFactory = new ProcessInstanceDb_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("ProcessInstanceDb");
    private static Type _theType = typeof(ProcessInstanceDb);
    static ProcessInstanceDb_Factory() {
      _fieldHandlers = new SoodaFieldHandler[11];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[2] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[3] = new Sooda.ObjectMapper.FieldHandlers.BlobFieldHandler(false);
      _fieldHandlers[4] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[5] = new Sooda.ObjectMapper.FieldHandlers.DateTimeFieldHandler(false);
      _fieldHandlers[6] = new Sooda.ObjectMapper.FieldHandlers.DateTimeFieldHandler(true);
      _fieldHandlers[7] = new Sooda.ObjectMapper.FieldHandlers.DateTimeFieldHandler(false);
      _fieldHandlers[8] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[9] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(true);
      _fieldHandlers[10] = new Sooda.ObjectMapper.FieldHandlers.DateTimeFieldHandler(true);
    }
    public ProcessInstanceDb_Factory() {
    }
    public static ProcessInstanceDb_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return ProcessInstanceDb_Stub.GetRef(tran, ((string)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return ProcessInstanceDb_Stub.TryGet(tran, ((string)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return ProcessInstanceDb_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new ProcessInstanceDb(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      ProcessInstanceDb retVal = new ProcessInstanceDb(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  [SoodaObjectFactoryAttribute("ProcessStatus", typeof(ProcessStatus))]
  public class ProcessStatus_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
    private static ProcessStatus_Factory _theFactory = new ProcessStatus_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("ProcessStatus");
    private static Type _theType = typeof(ProcessStatus);
    static ProcessStatus_Factory() {
      _fieldHandlers = new SoodaFieldHandler[2];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
    }
    public ProcessStatus_Factory() {
    }
    public static ProcessStatus_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return ProcessStatus_Stub.GetRef(tran, ((int)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return ProcessStatus_Stub.TryGet(tran, ((int)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return ProcessStatus_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new ProcessStatus(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      ProcessStatus retVal = new ProcessStatus(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  [SoodaObjectFactoryAttribute("TokenDb", typeof(TokenDb))]
  public class TokenDb_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
    private static TokenDb_Factory _theFactory = new TokenDb_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("TokenDb");
    private static Type _theType = typeof(TokenDb);
    static TokenDb_Factory() {
      _fieldHandlers = new SoodaFieldHandler[6];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[2] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[3] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[4] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[5] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
    }
    public TokenDb_Factory() {
    }
    public static TokenDb_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return TokenDb_Stub.GetRef(tran, ((string)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return TokenDb_Stub.TryGet(tran, ((string)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return TokenDb_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new TokenDb(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      TokenDb retVal = new TokenDb(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  [SoodaObjectFactoryAttribute("ActiveTransition", typeof(ActiveTransition))]
  public class ActiveTransition_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
    private static ActiveTransition_Factory _theFactory = new ActiveTransition_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("ActiveTransition");
    private static Type _theType = typeof(ActiveTransition);
    static ActiveTransition_Factory() {
      _fieldHandlers = new SoodaFieldHandler[9];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[2] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[3] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[4] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(true);
      _fieldHandlers[5] = new Sooda.ObjectMapper.FieldHandlers.DateTimeFieldHandler(true);
      _fieldHandlers[6] = new Sooda.ObjectMapper.FieldHandlers.DateTimeFieldHandler(true);
      _fieldHandlers[7] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[8] = new Sooda.ObjectMapper.FieldHandlers.BlobFieldHandler(false);
    }
    public ActiveTransition_Factory() {
    }
    public static ActiveTransition_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return ActiveTransition_Stub.GetRef(tran, ((string)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return ActiveTransition_Stub.TryGet(tran, ((string)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return ActiveTransition_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new ActiveTransition(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      ActiveTransition retVal = new ActiveTransition(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  public class ProcessDefinitionDbCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public ProcessDefinitionDbCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessDefinitionDb item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessDefinitionDbWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(int item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsProcessDefinitionDbWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("ProcessDefinitionDb", whereClause);
    }
  }
  public class ProcessDefinitionDbWrapperExpression : Sooda.QL.SoqlPathExpression {
    public ProcessDefinitionDbWrapperExpression() {
    }
    public ProcessDefinitionDbWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Id"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Name"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Version {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Version"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression FullName {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "FullName"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression ProcessXml {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "ProcessXml"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessDefinitionDbWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessDefinitionDb[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params int[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class ProcessDefinitionDbNullableWrapperExpression : ProcessDefinitionDbWrapperExpression {
    public ProcessDefinitionDbNullableWrapperExpression() {
    }
    public ProcessDefinitionDbNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
  public class ProcessInstanceDbCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public ProcessInstanceDbCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessInstanceDb item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessInstanceDbWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(string item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsProcessInstanceDbWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("ProcessInstanceDb", whereClause);
    }
  }
  public class ProcessInstanceDbWrapperExpression : Sooda.QL.SoqlPathExpression {
    public ProcessInstanceDbWrapperExpression() {
    }
    public ProcessInstanceDbWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression InstanceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "InstanceId"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression DefinitionId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "DefinitionId"));
      }
    }
    public virtual ProcessStatusWrapperExpression Status {
      get {
        return new ProcessStatusWrapperExpression(this, "Status");
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "RecordVersion"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression CreatedDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "CreatedDate"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression FinishedDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "FinishedDate"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression LastModified {
      get {
        return new Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "LastModified"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RetryCount {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "RetryCount"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression ErrorInfo {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "ErrorInfo"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression NextRetry {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "NextRetry"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessInstanceDbWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessInstanceDb[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params string[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(string left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(string left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(string left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(string left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class ProcessInstanceDbNullableWrapperExpression : ProcessInstanceDbWrapperExpression {
    public ProcessInstanceDbNullableWrapperExpression() {
    }
    public ProcessInstanceDbNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
  public class ProcessStatusCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public ProcessStatusCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessStatus item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessStatusWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(int item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsProcessStatusWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("ProcessStatus", whereClause);
    }
  }
  public class ProcessStatusWrapperExpression : Sooda.QL.SoqlPathExpression {
    public ProcessStatusWrapperExpression() {
    }
    public ProcessStatusWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Id"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Name"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessStatusWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessStatus[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params int[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessStatusWrapperExpression left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessStatusWrapperExpression left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(int left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(int left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessStatus left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessStatus left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessStatusWrapperExpression left, ProcessStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessStatusWrapperExpression left, ProcessStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessStatusWrapperExpression left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessStatusWrapperExpression left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(int left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(int left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessStatus left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessStatus left, ProcessStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessStatusWrapperExpression left, ProcessStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessStatusWrapperExpression left, ProcessStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class ProcessStatusNullableWrapperExpression : ProcessStatusWrapperExpression {
    public ProcessStatusNullableWrapperExpression() {
    }
    public ProcessStatusNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
  public class TokenDbCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public TokenDbCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(TokenDb item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(TokenDbWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(string item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsTokenDbWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("TokenDb", whereClause);
    }
  }
  public class TokenDbWrapperExpression : Sooda.QL.SoqlPathExpression {
    public TokenDbWrapperExpression() {
    }
    public TokenDbWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Id"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression ProcessInstance {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "ProcessInstance"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Mode {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Mode"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Status"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression PlaceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "PlaceId"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "RecordVersion"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params TokenDbWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params TokenDb[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params string[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(string left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(string left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(string left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(string left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDbWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class TokenDbNullableWrapperExpression : TokenDbWrapperExpression {
    public TokenDbNullableWrapperExpression() {
    }
    public TokenDbNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
  public class ActiveTransitionCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public ActiveTransitionCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ActiveTransition item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ActiveTransitionWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(string item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsActiveTransitionWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("ActiveTransition", whereClause);
    }
  }
  public class ActiveTransitionWrapperExpression : Sooda.QL.SoqlPathExpression {
    public ActiveTransitionWrapperExpression() {
    }
    public ActiveTransitionWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Id"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression ProcessInstance {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "ProcessInstance"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression TaskId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "TaskId"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Status"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression DeferredChoiceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "DeferredChoiceId"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression EnabledDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "EnabledDate"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression CompletedDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "CompletedDate"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "RecordVersion"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ActiveTransitionWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ActiveTransition[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params string[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ActiveTransitionWrapperExpression left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ActiveTransitionWrapperExpression left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(string left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(string left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ActiveTransitionWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ActiveTransitionWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ActiveTransition left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ActiveTransition left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ActiveTransitionWrapperExpression left, ActiveTransition right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ActiveTransitionWrapperExpression left, ActiveTransition right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ActiveTransitionWrapperExpression left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ActiveTransitionWrapperExpression left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(string left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(string left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ActiveTransitionWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ActiveTransitionWrapperExpression left, string right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ActiveTransition left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ActiveTransition left, ActiveTransitionWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ActiveTransitionWrapperExpression left, ActiveTransition right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ActiveTransitionWrapperExpression left, ActiveTransition right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class ActiveTransitionNullableWrapperExpression : ActiveTransitionWrapperExpression {
    public ActiveTransitionNullableWrapperExpression() {
    }
    public ActiveTransitionNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
}
namespace NGinn.Engine.Dao.TypedQueries {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using NGinn.Engine.Dao.Stubs;
  
  public class ProcessDefinitionDbField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Id"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("Name"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Version {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Version"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression FullName {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("FullName"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression ProcessXml {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("ProcessXml"));
      }
    }
  }
  public class ProcessInstanceDbField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression InstanceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("InstanceId"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression DefinitionId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("DefinitionId"));
      }
    }
    public static ProcessStatusWrapperExpression Status {
      get {
        return new ProcessStatusWrapperExpression(null, "Status");
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("RecordVersion"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression CreatedDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression("CreatedDate"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression FinishedDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression("FinishedDate"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression LastModified {
      get {
        return new Sooda.QL.TypedWrappers.SoqlDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression("LastModified"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RetryCount {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("RetryCount"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression ErrorInfo {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression(new Sooda.QL.SoqlPathExpression("ErrorInfo"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression NextRetry {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression("NextRetry"));
      }
    }
  }
  public class ProcessStatusField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Id"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("Name"));
      }
    }
  }
  public class TokenDbField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("Id"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression ProcessInstance {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("ProcessInstance"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Mode {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Mode"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Status"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression PlaceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("PlaceId"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("RecordVersion"));
      }
    }
  }
  public class ActiveTransitionField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("Id"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression ProcessInstance {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("ProcessInstance"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression TaskId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("TaskId"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Status"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression DeferredChoiceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableStringWrapperExpression(new Sooda.QL.SoqlPathExpression("DeferredChoiceId"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression EnabledDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression("EnabledDate"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression CompletedDate {
      get {
        return new Sooda.QL.TypedWrappers.SoqlNullableDateTimeWrapperExpression(new Sooda.QL.SoqlPathExpression("CompletedDate"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("RecordVersion"));
      }
    }
  }
}
namespace NGinn.Engine.Dao {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using NGinnEngineDaoStubs = NGinn.Engine.Dao.Stubs;
  
  public class _DatabaseSchema : object, Sooda.ObjectMapper.ISoodaSchema {
    private Sooda.ISoodaObjectFactory[] _factories;
    private static Sooda.Schema.SchemaInfo _theSchema;
    static _DatabaseSchema() {
      _theSchema = LoadSchema();
    }
    public _DatabaseSchema() {
      this._factories = new ISoodaObjectFactory[] {
          NGinn.Engine.Dao.Stubs.ProcessDefinitionDb_Factory.TheFactory,
          NGinn.Engine.Dao.Stubs.ProcessInstanceDb_Factory.TheFactory,
          NGinn.Engine.Dao.Stubs.ProcessStatus_Factory.TheFactory,
          NGinn.Engine.Dao.Stubs.TokenDb_Factory.TheFactory,
          NGinn.Engine.Dao.Stubs.ActiveTransition_Factory.TheFactory};
    }
    public virtual Sooda.Schema.SchemaInfo Schema {
      get {
        return GetSchema();
      }
    }
    public static Sooda.Schema.SchemaInfo GetSchema() {
      return _theSchema;
    }
    private static Sooda.Schema.SchemaInfo LoadSchema() {
      return Sooda.ObjectMapper.SchemaLoader.GetSchemaFromAssembly(typeof(NGinn.Engine.Dao._DatabaseSchema).Assembly);
    }
    public virtual Sooda.ISoodaObjectFactory[] GetFactories() {
      return this._factories;
    }
  }
}
