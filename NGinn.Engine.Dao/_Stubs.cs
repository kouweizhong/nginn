//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:2.0.50727.1433
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Sooda.SoodaObjectsAssembly(typeof(NGinn.Engine.Dao._DatabaseSchema))]

namespace NGinn.Engine.Dao {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using NGinn.Engine.Dao.Stubs;
  
  public class ProcessDefinitionDbList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.ProcessDefinitionDb> {
    public ProcessDefinitionDbList() {
    }
    public ProcessDefinitionDbList(ISoodaObjectList list) : 
        base(list) {
    }
    public new ProcessDefinitionDb this[int pos] {
      get {
        return ((ProcessDefinitionDb)(base.GetItem(pos)));
      }
    }
    public int Add(ProcessDefinitionDb obj) {
      return base.Add2(obj);
    }
    public void Remove(ProcessDefinitionDb obj) {
      base.Remove2(obj);
    }
    public bool Contains(ProcessDefinitionDb obj) {
      return base.Contains2(obj);
    }
    public ProcessDefinitionDbList Sort(IComparer comparer) {
      return new ProcessDefinitionDbList(base.Sort2(comparer));
    }
    public ProcessDefinitionDbList Sort(string sortOrder) {
      return new ProcessDefinitionDbList(base.Sort2(sortOrder));
    }
    public ProcessDefinitionDbList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new ProcessDefinitionDbList(base.Sort2(sortExpression));
    }
    public ProcessDefinitionDbList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new ProcessDefinitionDbList(base.Sort2(sortExpression, sortOrder));
    }
    public ProcessDefinitionDbList SelectFirst(int count) {
      return new ProcessDefinitionDbList(base.SelectFirst2(count));
    }
    public ProcessDefinitionDbList SelectLast(int count) {
      return new ProcessDefinitionDbList(base.SelectLast2(count));
    }
    public ProcessDefinitionDbList SelectRange(int _from, int _to) {
      return new ProcessDefinitionDbList(base.SelectRange2(_from, _to));
    }
    public ProcessDefinitionDbList Filter(SoodaObjectFilter f) {
      return new ProcessDefinitionDbList(base.Filter2(f));
    }
    public ProcessDefinitionDbList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new ProcessDefinitionDbList(base.Filter2(sortExpression));
    }
    public ProcessDefinitionDbList Filter(SoodaWhereClause whereClause) {
      return new ProcessDefinitionDbList(base.Filter2(whereClause));
    }
    public ProcessDefinitionDbList GetSnapshot() {
      return new ProcessDefinitionDbList(base.GetSnapshot2());
    }
  }
  public class ProcessInstanceDbList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.ProcessInstanceDb> {
    public ProcessInstanceDbList() {
    }
    public ProcessInstanceDbList(ISoodaObjectList list) : 
        base(list) {
    }
    public new ProcessInstanceDb this[int pos] {
      get {
        return ((ProcessInstanceDb)(base.GetItem(pos)));
      }
    }
    public int Add(ProcessInstanceDb obj) {
      return base.Add2(obj);
    }
    public void Remove(ProcessInstanceDb obj) {
      base.Remove2(obj);
    }
    public bool Contains(ProcessInstanceDb obj) {
      return base.Contains2(obj);
    }
    public ProcessInstanceDbList Sort(IComparer comparer) {
      return new ProcessInstanceDbList(base.Sort2(comparer));
    }
    public ProcessInstanceDbList Sort(string sortOrder) {
      return new ProcessInstanceDbList(base.Sort2(sortOrder));
    }
    public ProcessInstanceDbList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new ProcessInstanceDbList(base.Sort2(sortExpression));
    }
    public ProcessInstanceDbList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new ProcessInstanceDbList(base.Sort2(sortExpression, sortOrder));
    }
    public ProcessInstanceDbList SelectFirst(int count) {
      return new ProcessInstanceDbList(base.SelectFirst2(count));
    }
    public ProcessInstanceDbList SelectLast(int count) {
      return new ProcessInstanceDbList(base.SelectLast2(count));
    }
    public ProcessInstanceDbList SelectRange(int _from, int _to) {
      return new ProcessInstanceDbList(base.SelectRange2(_from, _to));
    }
    public ProcessInstanceDbList Filter(SoodaObjectFilter f) {
      return new ProcessInstanceDbList(base.Filter2(f));
    }
    public ProcessInstanceDbList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new ProcessInstanceDbList(base.Filter2(sortExpression));
    }
    public ProcessInstanceDbList Filter(SoodaWhereClause whereClause) {
      return new ProcessInstanceDbList(base.Filter2(whereClause));
    }
    public ProcessInstanceDbList GetSnapshot() {
      return new ProcessInstanceDbList(base.GetSnapshot2());
    }
  }
  public class TokenDbList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.TokenDb> {
    public TokenDbList() {
    }
    public TokenDbList(ISoodaObjectList list) : 
        base(list) {
    }
    public new TokenDb this[int pos] {
      get {
        return ((TokenDb)(base.GetItem(pos)));
      }
    }
    public int Add(TokenDb obj) {
      return base.Add2(obj);
    }
    public void Remove(TokenDb obj) {
      base.Remove2(obj);
    }
    public bool Contains(TokenDb obj) {
      return base.Contains2(obj);
    }
    public TokenDbList Sort(IComparer comparer) {
      return new TokenDbList(base.Sort2(comparer));
    }
    public TokenDbList Sort(string sortOrder) {
      return new TokenDbList(base.Sort2(sortOrder));
    }
    public TokenDbList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new TokenDbList(base.Sort2(sortExpression));
    }
    public TokenDbList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new TokenDbList(base.Sort2(sortExpression, sortOrder));
    }
    public TokenDbList SelectFirst(int count) {
      return new TokenDbList(base.SelectFirst2(count));
    }
    public TokenDbList SelectLast(int count) {
      return new TokenDbList(base.SelectLast2(count));
    }
    public TokenDbList SelectRange(int _from, int _to) {
      return new TokenDbList(base.SelectRange2(_from, _to));
    }
    public TokenDbList Filter(SoodaObjectFilter f) {
      return new TokenDbList(base.Filter2(f));
    }
    public TokenDbList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new TokenDbList(base.Filter2(sortExpression));
    }
    public TokenDbList Filter(SoodaWhereClause whereClause) {
      return new TokenDbList(base.Filter2(whereClause));
    }
    public TokenDbList GetSnapshot() {
      return new TokenDbList(base.GetSnapshot2());
    }
  }
  public class TokenStatusList : Sooda.ObjectMapper.SoodaObjectCollectionWrapperGeneric<NGinn.Engine.Dao.TokenStatus> {
    public TokenStatusList() {
    }
    public TokenStatusList(ISoodaObjectList list) : 
        base(list) {
    }
    public new TokenStatus this[int pos] {
      get {
        return ((TokenStatus)(base.GetItem(pos)));
      }
    }
    public int Add(TokenStatus obj) {
      return base.Add2(obj);
    }
    public void Remove(TokenStatus obj) {
      base.Remove2(obj);
    }
    public bool Contains(TokenStatus obj) {
      return base.Contains2(obj);
    }
    public TokenStatusList Sort(IComparer comparer) {
      return new TokenStatusList(base.Sort2(comparer));
    }
    public TokenStatusList Sort(string sortOrder) {
      return new TokenStatusList(base.Sort2(sortOrder));
    }
    public TokenStatusList Sort(Sooda.QL.SoqlExpression sortExpression) {
      return new TokenStatusList(base.Sort2(sortExpression));
    }
    public TokenStatusList Sort(Sooda.QL.SoqlExpression sortExpression, Sooda.SortOrder sortOrder) {
      return new TokenStatusList(base.Sort2(sortExpression, sortOrder));
    }
    public TokenStatusList SelectFirst(int count) {
      return new TokenStatusList(base.SelectFirst2(count));
    }
    public TokenStatusList SelectLast(int count) {
      return new TokenStatusList(base.SelectLast2(count));
    }
    public TokenStatusList SelectRange(int _from, int _to) {
      return new TokenStatusList(base.SelectRange2(_from, _to));
    }
    public TokenStatusList Filter(SoodaObjectFilter f) {
      return new TokenStatusList(base.Filter2(f));
    }
    public TokenStatusList Filter(Sooda.QL.SoqlBooleanExpression sortExpression) {
      return new TokenStatusList(base.Filter2(sortExpression));
    }
    public TokenStatusList Filter(SoodaWhereClause whereClause) {
      return new TokenStatusList(base.Filter2(whereClause));
    }
    public TokenStatusList GetSnapshot() {
      return new TokenStatusList(base.GetSnapshot2());
    }
  }
}
namespace NGinn.Engine.Dao.Stubs {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using Sooda.ObjectMapper;
  using NGinn.Engine.Dao;
  
  public class ProcessDefinitionDb_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public int Id;
    public string Name;
    public int Version;
    public string FullName;
    public byte[] ProcessData;
    public ProcessDefinitionDb_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public ProcessDefinitionDb_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new ProcessDefinitionDb_Values(this);
    }
  }
  public class ProcessDefinitionDb_Stub : SoodaObject {
    private static IPrimaryKeyGenerator keyGenerator = new Sooda.ObjectMapper.KeyGenerators.TableBasedGenerator("ProcessDefinitionDb", NGinn.Engine.Dao._DatabaseSchema.GetSchema().GetDataSourceInfo("default"));
    public ProcessDefinitionDb_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public ProcessDefinitionDb_Stub(SoodaConstructor c) : 
        base(c) {
    }
    public int Id {
      get {
        return ((int)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(202)]
    public string Name {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).Name;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Name", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Name), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Name));
      }
    }
    public int Version {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).Version;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Version", 2, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Version), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Version));
      }
    }
    [Sooda.SoodaFieldSizeAttribute(202)]
    public string FullName {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).FullName;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "FullName", 3, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_FullName), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_FullName));
      }
    }
    public byte[] ProcessData {
      get {
        return this.GetProcessDefinitionDbFieldValuesForRead(0).ProcessData;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "ProcessData", 4, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_ProcessData), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_ProcessData));
      }
    }
    private ProcessDefinitionDb_Values GetProcessDefinitionDbFieldValuesForRead(int requiredTable) {
      return ((ProcessDefinitionDb_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new ProcessDefinitionDb_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return ProcessDefinitionDb_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return ProcessDefinitionDb_Factory.InternalGetFieldHandler(ordinal);
    }
    public static IPrimaryKeyGenerator GetKeyGenerator() {
      return keyGenerator;
    }
    protected override void InitNewObject() {
      this.SetPrimaryKeyValue(GetKeyGenerator().GetNextKeyValue());
    }
    public static ProcessDefinitionDb LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDb LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDb LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDb LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((ProcessDefinitionDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessDefinitionDbList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static ProcessDefinitionDbList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new ProcessDefinitionDbList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, ProcessDefinitionDb_Factory.TheClassInfo));
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessDefinitionDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessDefinitionDb Load(int id) {
      return Load(SoodaTransaction.ActiveTransaction, id);
    }
    public static ProcessDefinitionDb Load(SoodaTransaction tran, int id) {
      ProcessDefinitionDb retVal = NGinn.Engine.Dao.Stubs.ProcessDefinitionDb_Stub.GetRef(tran, id);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static ProcessDefinitionDb GetRef(int id) {
      return GetRef(SoodaTransaction.ActiveTransaction, id);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessDefinitionDb TryGet(int id) {
      return TryGet(SoodaTransaction.ActiveTransaction, id);
    }
    public static ProcessDefinitionDb GetRef(SoodaTransaction tran, int id) {
      return ((ProcessDefinitionDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessDefinitionDb_Factory.TheFactory, id)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessDefinitionDb TryGet(SoodaTransaction tran, int id) {
      return ((ProcessDefinitionDb)(tran.FindObjectWithKey("ProcessDefinitionDb", id, typeof(ProcessDefinitionDb))));
    }
    public static ProcessDefinitionDb GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessDefinitionDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessDefinitionDb_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessDefinitionDb TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessDefinitionDb)(tran.FindObjectWithKey("ProcessDefinitionDb", tuple, typeof(ProcessDefinitionDb))));
    }
    protected virtual void BeforeFieldUpdate_Name(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Name", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Name(object oldValue, object newValue) {
      this.AfterFieldUpdate("Name", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Version(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Version", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Version(object oldValue, object newValue) {
      this.AfterFieldUpdate("Version", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_FullName(object oldValue, object newValue) {
      this.BeforeFieldUpdate("FullName", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_FullName(object oldValue, object newValue) {
      this.AfterFieldUpdate("FullName", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_ProcessData(object oldValue, object newValue) {
      this.BeforeFieldUpdate("ProcessData", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_ProcessData(object oldValue, object newValue) {
      this.AfterFieldUpdate("ProcessData", oldValue, newValue);
    }
  }
  public class ProcessInstanceDb_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public System.Guid InstanceId;
    public string DefinitionId;
    public int Status;
    public byte[] InstanceData;
    public int RecordVersion;
    public ProcessInstanceDb_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public ProcessInstanceDb_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new ProcessInstanceDb_Values(this);
    }
  }
  public class ProcessInstanceDb_Stub : SoodaObject {
    private static IPrimaryKeyGenerator keyGenerator = new Sooda.ObjectMapper.KeyGenerators.GuidGenerator();
    public ProcessInstanceDb_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public ProcessInstanceDb_Stub(SoodaConstructor c) : 
        base(c) {
    }
    public System.Guid InstanceId {
      get {
        return ((System.Guid)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string DefinitionId {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).DefinitionId;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "DefinitionId", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_DefinitionId), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_DefinitionId));
      }
    }
    public int Status {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).Status;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Status", 2, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Status), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Status));
      }
    }
    public byte[] InstanceData {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).InstanceData;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "InstanceData", 3, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_InstanceData), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_InstanceData));
      }
    }
    public int RecordVersion {
      get {
        return this.GetProcessInstanceDbFieldValuesForRead(0).RecordVersion;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "RecordVersion", 4, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_RecordVersion), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_RecordVersion));
      }
    }
    private ProcessInstanceDb_Values GetProcessInstanceDbFieldValuesForRead(int requiredTable) {
      return ((ProcessInstanceDb_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new ProcessInstanceDb_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return ProcessInstanceDb_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return ProcessInstanceDb_Factory.InternalGetFieldHandler(ordinal);
    }
    public static IPrimaryKeyGenerator GetKeyGenerator() {
      return keyGenerator;
    }
    protected override void InitNewObject() {
      this.SetPrimaryKeyValue(GetKeyGenerator().GetNextKeyValue());
    }
    public static ProcessInstanceDb LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDb LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDb LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDb LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((ProcessInstanceDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static ProcessInstanceDbList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static ProcessInstanceDbList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new ProcessInstanceDbList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, ProcessInstanceDb_Factory.TheClassInfo));
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static ProcessInstanceDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static ProcessInstanceDb Load(System.Guid instanceId) {
      return Load(SoodaTransaction.ActiveTransaction, instanceId);
    }
    public static ProcessInstanceDb Load(SoodaTransaction tran, System.Guid instanceId) {
      ProcessInstanceDb retVal = NGinn.Engine.Dao.Stubs.ProcessInstanceDb_Stub.GetRef(tran, instanceId);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static ProcessInstanceDb GetRef(System.Guid instanceId) {
      return GetRef(SoodaTransaction.ActiveTransaction, instanceId);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessInstanceDb TryGet(System.Guid instanceId) {
      return TryGet(SoodaTransaction.ActiveTransaction, instanceId);
    }
    public static ProcessInstanceDb GetRef(SoodaTransaction tran, System.Guid instanceId) {
      return ((ProcessInstanceDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessInstanceDb_Factory.TheFactory, instanceId)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessInstanceDb TryGet(SoodaTransaction tran, System.Guid instanceId) {
      return ((ProcessInstanceDb)(tran.FindObjectWithKey("ProcessInstanceDb", instanceId, typeof(ProcessInstanceDb))));
    }
    public static ProcessInstanceDb GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessInstanceDb)(Sooda.SoodaObject.GetRefHelper(tran, ProcessInstanceDb_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static ProcessInstanceDb TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((ProcessInstanceDb)(tran.FindObjectWithKey("ProcessInstanceDb", tuple, typeof(ProcessInstanceDb))));
    }
    protected virtual void BeforeFieldUpdate_DefinitionId(object oldValue, object newValue) {
      this.BeforeFieldUpdate("DefinitionId", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_DefinitionId(object oldValue, object newValue) {
      this.AfterFieldUpdate("DefinitionId", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Status(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Status(object oldValue, object newValue) {
      this.AfterFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_InstanceData(object oldValue, object newValue) {
      this.BeforeFieldUpdate("InstanceData", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_InstanceData(object oldValue, object newValue) {
      this.AfterFieldUpdate("InstanceData", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.BeforeFieldUpdate("RecordVersion", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.AfterFieldUpdate("RecordVersion", oldValue, newValue);
    }
  }
  public class TokenDb_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public System.Guid Id;
    public System.Guid ProcessInstance;
    public int Mode;
    public int Status;
    public string PlaceId;
    public int RecordVersion;
    public TokenDb_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public TokenDb_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new TokenDb_Values(this);
    }
  }
  public class TokenDb_Stub : SoodaObject {
    private static IPrimaryKeyGenerator keyGenerator = new Sooda.ObjectMapper.KeyGenerators.GuidGenerator();
    public TokenDb_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public TokenDb_Stub(SoodaConstructor c) : 
        base(c) {
    }
    public System.Guid Id {
      get {
        return ((System.Guid)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    public System.Guid ProcessInstance {
      get {
        return this.GetTokenDbFieldValuesForRead(0).ProcessInstance;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "ProcessInstance", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_ProcessInstance), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_ProcessInstance));
      }
    }
    public int Mode {
      get {
        return this.GetTokenDbFieldValuesForRead(0).Mode;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Mode", 2, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Mode), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Mode));
      }
    }
    public int Status {
      get {
        return this.GetTokenDbFieldValuesForRead(0).Status;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Status", 3, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Status), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Status));
      }
    }
    [Sooda.SoodaFieldSizeAttribute(50)]
    public string PlaceId {
      get {
        return this.GetTokenDbFieldValuesForRead(0).PlaceId;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "PlaceId", 4, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_PlaceId), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_PlaceId));
      }
    }
    public int RecordVersion {
      get {
        return this.GetTokenDbFieldValuesForRead(0).RecordVersion;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "RecordVersion", 5, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_RecordVersion), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_RecordVersion));
      }
    }
    private TokenDb_Values GetTokenDbFieldValuesForRead(int requiredTable) {
      return ((TokenDb_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new TokenDb_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return TokenDb_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return TokenDb_Factory.InternalGetFieldHandler(ordinal);
    }
    public static IPrimaryKeyGenerator GetKeyGenerator() {
      return keyGenerator;
    }
    protected override void InitNewObject() {
      this.SetPrimaryKeyValue(GetKeyGenerator().GetNextKeyValue());
    }
    public static TokenDb LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDb LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDb LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDb LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((TokenDb)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenDbList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static TokenDbList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new TokenDbList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, TokenDb_Factory.TheClassInfo));
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenDbList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static TokenDb Load(System.Guid id) {
      return Load(SoodaTransaction.ActiveTransaction, id);
    }
    public static TokenDb Load(SoodaTransaction tran, System.Guid id) {
      TokenDb retVal = NGinn.Engine.Dao.Stubs.TokenDb_Stub.GetRef(tran, id);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static TokenDb GetRef(System.Guid id) {
      return GetRef(SoodaTransaction.ActiveTransaction, id);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenDb TryGet(System.Guid id) {
      return TryGet(SoodaTransaction.ActiveTransaction, id);
    }
    public static TokenDb GetRef(SoodaTransaction tran, System.Guid id) {
      return ((TokenDb)(Sooda.SoodaObject.GetRefHelper(tran, TokenDb_Factory.TheFactory, id)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenDb TryGet(SoodaTransaction tran, System.Guid id) {
      return ((TokenDb)(tran.FindObjectWithKey("TokenDb", id, typeof(TokenDb))));
    }
    public static TokenDb GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((TokenDb)(Sooda.SoodaObject.GetRefHelper(tran, TokenDb_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenDb TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((TokenDb)(tran.FindObjectWithKey("TokenDb", tuple, typeof(TokenDb))));
    }
    protected virtual void BeforeFieldUpdate_ProcessInstance(object oldValue, object newValue) {
      this.BeforeFieldUpdate("ProcessInstance", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_ProcessInstance(object oldValue, object newValue) {
      this.AfterFieldUpdate("ProcessInstance", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Mode(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Mode", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Mode(object oldValue, object newValue) {
      this.AfterFieldUpdate("Mode", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_Status(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Status(object oldValue, object newValue) {
      this.AfterFieldUpdate("Status", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_PlaceId(object oldValue, object newValue) {
      this.BeforeFieldUpdate("PlaceId", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_PlaceId(object oldValue, object newValue) {
      this.AfterFieldUpdate("PlaceId", oldValue, newValue);
    }
    protected virtual void BeforeFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.BeforeFieldUpdate("RecordVersion", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_RecordVersion(object oldValue, object newValue) {
      this.AfterFieldUpdate("RecordVersion", oldValue, newValue);
    }
  }
  public class TokenStatus_Values : Sooda.SoodaObjectReflectionBasedFieldValues {
    public int Id;
    public string Name;
    public TokenStatus_Values(Sooda.SoodaObjectReflectionBasedFieldValues other) : 
        base(other) {
    }
    public TokenStatus_Values(string[] fieldNames) : 
        base(fieldNames) {
    }
    public override Sooda.SoodaObjectFieldValues Clone() {
      return new TokenStatus_Values(this);
    }
  }
  public class TokenStatus_Stub : SoodaObject {
    private static IPrimaryKeyGenerator keyGenerator = new Sooda.ObjectMapper.KeyGenerators.TableBasedGenerator("TokenStatus", NGinn.Engine.Dao._DatabaseSchema.GetSchema().GetDataSourceInfo("default"));
    public TokenStatus_Stub(SoodaTransaction tran) : 
        base(tran) {
      this.InitNewObject();
    }
    public TokenStatus_Stub(SoodaConstructor c) : 
        base(c) {
    }
    public int Id {
      get {
        return ((int)(this.GetPrimaryKeyValue()));
      }
      set {
        this.SetPrimaryKeyValue(value);
      }
    }
    [Sooda.SoodaFieldSizeAttribute(202)]
    public string Name {
      get {
        return this.GetTokenStatusFieldValuesForRead(0).Name;
      }
      set {
        Sooda.ObjectMapper.SoodaObjectImpl.SetPlainFieldValue(this, 0, "Name", 1, Sooda.SoodaNullable.Box(value), new Sooda.SoodaFieldUpdateDelegate(this.BeforeFieldUpdate_Name), new Sooda.SoodaFieldUpdateDelegate(this.AfterFieldUpdate_Name));
      }
    }
    public static TokenStatus Ready {
      get {
        return TokenStatus_Stub.GetRef(1);
      }
    }
    public static TokenStatus Waiting {
      get {
        return TokenStatus_Stub.GetRef(2);
      }
    }
    public static TokenStatus Error {
      get {
        return TokenStatus_Stub.GetRef(3);
      }
    }
    public static TokenStatus Cancelled {
      get {
        return TokenStatus_Stub.GetRef(4);
      }
    }
    public static TokenStatus Finished {
      get {
        return TokenStatus_Stub.GetRef(5);
      }
    }
    private TokenStatus_Values GetTokenStatusFieldValuesForRead(int requiredTable) {
      return ((TokenStatus_Values)(Sooda.ObjectMapper.SoodaObjectImpl.GetFieldValuesForRead(this, requiredTable)));
    }
    protected override SoodaObjectFieldValues InitFieldValues(int fieldCount, string[] fieldNames) {
      return new TokenStatus_Values(fieldNames);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public override Sooda.Schema.ClassInfo GetClassInfo() {
      return TokenStatus_Factory.TheClassInfo;
    }
    protected override Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return TokenStatus_Factory.InternalGetFieldHandler(ordinal);
    }
    public static IPrimaryKeyGenerator GetKeyGenerator() {
      return keyGenerator;
    }
    protected override void InitNewObject() {
      this.SetPrimaryKeyValue(GetKeyGenerator().GetNextKeyValue());
    }
    public static TokenStatus LoadSingleObject(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((TokenStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(SoodaTransaction.ActiveTransaction, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenStatus LoadSingleObject(Sooda.SoodaWhereClause @where) {
      return ((TokenStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenStatus LoadSingleObject(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return ((TokenStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectBE(filterExpression, DoGetList(tran, new Sooda.SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenStatus LoadSingleObject(SoodaTransaction tran, Sooda.SoodaWhereClause @where) {
      return ((TokenStatus)(Sooda.ObjectMapper.SoodaObjectImpl.SelectSingleObjectWC(@where, DoGetList(tran, @where, SoodaOrderBy.Unsorted, 2, SoodaSnapshotOptions.Default))));
    }
    public static TokenStatusList GetAllObjects() {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause("1=1"), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetAllObjects(SoodaTransaction transaction) {
      return DoGetList(transaction, null, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, -1, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy) {
      return DoGetList(tran, @where, orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, -1, options);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, @where, orderBy, topCount, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, @where, orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, SoodaWhereClause @where, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, @where, orderBy, topCount, options);
    }
    private static TokenStatusList DoGetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderByClause, int topCount, SoodaSnapshotOptions options) {
      return new TokenStatusList(new Sooda.ObjectMapper.SoodaObjectListSnapshot(tran, whereClause, orderByClause, topCount, options, TokenStatus_Factory.TheClassInfo));
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, -1, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, -1, options);
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(SoodaTransaction.ActiveTransaction, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), SoodaOrderBy.Unsorted, topCount, options);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, SoodaSnapshotOptions.Default);
    }
    public static TokenStatusList GetList(SoodaTransaction tran, Sooda.QL.SoqlBooleanExpression filterExpression, SoodaOrderBy orderBy, int topCount, SoodaSnapshotOptions options) {
      return DoGetList(tran, new SoodaWhereClause(filterExpression), orderBy, topCount, options);
    }
    public static TokenStatus Load(int id) {
      return Load(SoodaTransaction.ActiveTransaction, id);
    }
    public static TokenStatus Load(SoodaTransaction tran, int id) {
      TokenStatus retVal = NGinn.Engine.Dao.Stubs.TokenStatus_Stub.GetRef(tran, id);
      Sooda.ObjectMapper.SoodaObjectImpl.LoadAllData(retVal);
      return retVal;
    }
    public static TokenStatus GetRef(int id) {
      return GetRef(SoodaTransaction.ActiveTransaction, id);
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenStatus TryGet(int id) {
      return TryGet(SoodaTransaction.ActiveTransaction, id);
    }
    public static TokenStatus GetRef(SoodaTransaction tran, int id) {
      return ((TokenStatus)(Sooda.SoodaObject.GetRefHelper(tran, TokenStatus_Factory.TheFactory, id)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenStatus TryGet(SoodaTransaction tran, int id) {
      return ((TokenStatus)(tran.FindObjectWithKey("TokenStatus", id, typeof(TokenStatus))));
    }
    public static TokenStatus GetRef(SoodaTransaction tran, SoodaTuple tuple) {
      return ((TokenStatus)(Sooda.SoodaObject.GetRefHelper(tran, TokenStatus_Factory.TheFactory, tuple)));
    }
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public static TokenStatus TryGet(SoodaTransaction tran, SoodaTuple tuple) {
      return ((TokenStatus)(tran.FindObjectWithKey("TokenStatus", tuple, typeof(TokenStatus))));
    }
    protected virtual void BeforeFieldUpdate_Name(object oldValue, object newValue) {
      this.BeforeFieldUpdate("Name", oldValue, newValue);
    }
    protected virtual void AfterFieldUpdate_Name(object oldValue, object newValue) {
      this.AfterFieldUpdate("Name", oldValue, newValue);
    }
  }
  [SoodaObjectFactoryAttribute("ProcessDefinitionDb", typeof(ProcessDefinitionDb))]
  public class ProcessDefinitionDb_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
    private static ProcessDefinitionDb_Factory _theFactory = new ProcessDefinitionDb_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("ProcessDefinitionDb");
    private static Type _theType = typeof(ProcessDefinitionDb);
    static ProcessDefinitionDb_Factory() {
      _fieldHandlers = new SoodaFieldHandler[5];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[2] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[3] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[4] = new Sooda.ObjectMapper.FieldHandlers.BlobFieldHandler(false);
    }
    public ProcessDefinitionDb_Factory() {
    }
    public static ProcessDefinitionDb_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.ProcessDefinitionDb_Stub.GetRef(tran, ((int)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.ProcessDefinitionDb_Stub.TryGet(tran, ((int)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return NGinn.Engine.Dao.Stubs.ProcessDefinitionDb_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new ProcessDefinitionDb(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      ProcessDefinitionDb retVal = new ProcessDefinitionDb(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  [SoodaObjectFactoryAttribute("ProcessInstanceDb", typeof(ProcessInstanceDb))]
  public class ProcessInstanceDb_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.GuidFieldHandler(false);
    private static ProcessInstanceDb_Factory _theFactory = new ProcessInstanceDb_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("ProcessInstanceDb");
    private static Type _theType = typeof(ProcessInstanceDb);
    static ProcessInstanceDb_Factory() {
      _fieldHandlers = new SoodaFieldHandler[5];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.GuidFieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[2] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[3] = new Sooda.ObjectMapper.FieldHandlers.BlobFieldHandler(false);
      _fieldHandlers[4] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
    }
    public ProcessInstanceDb_Factory() {
    }
    public static ProcessInstanceDb_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.ProcessInstanceDb_Stub.GetRef(tran, ((System.Guid)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.ProcessInstanceDb_Stub.TryGet(tran, ((System.Guid)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return NGinn.Engine.Dao.Stubs.ProcessInstanceDb_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new ProcessInstanceDb(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      ProcessInstanceDb retVal = new ProcessInstanceDb(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  [SoodaObjectFactoryAttribute("TokenDb", typeof(TokenDb))]
  public class TokenDb_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.GuidFieldHandler(false);
    private static TokenDb_Factory _theFactory = new TokenDb_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("TokenDb");
    private static Type _theType = typeof(TokenDb);
    static TokenDb_Factory() {
      _fieldHandlers = new SoodaFieldHandler[6];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.GuidFieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.GuidFieldHandler(false);
      _fieldHandlers[2] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[3] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[4] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
      _fieldHandlers[5] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
    }
    public TokenDb_Factory() {
    }
    public static TokenDb_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.TokenDb_Stub.GetRef(tran, ((System.Guid)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.TokenDb_Stub.TryGet(tran, ((System.Guid)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return NGinn.Engine.Dao.Stubs.TokenDb_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new TokenDb(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      TokenDb retVal = new TokenDb(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  [SoodaObjectFactoryAttribute("TokenStatus", typeof(TokenStatus))]
  public class TokenStatus_Factory : object, ISoodaObjectFactory {
    private static SoodaFieldHandler[] _fieldHandlers;
    private static SoodaFieldHandler _primaryKeyFieldHandler = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
    private static TokenStatus_Factory _theFactory = new TokenStatus_Factory();
    private static Sooda.Schema.ClassInfo _theClassInfo = NGinn.Engine.Dao._DatabaseSchema.GetSchema().FindClassByName("TokenStatus");
    private static Type _theType = typeof(TokenStatus);
    static TokenStatus_Factory() {
      _fieldHandlers = new SoodaFieldHandler[2];
      _fieldHandlers[0] = new Sooda.ObjectMapper.FieldHandlers.Int32FieldHandler(false);
      _fieldHandlers[1] = new Sooda.ObjectMapper.FieldHandlers.StringFieldHandler(false);
    }
    public TokenStatus_Factory() {
    }
    public static TokenStatus_Factory TheFactory {
      get {
        return _theFactory;
      }
    }
    public virtual Type TheType {
      get {
        return _theType;
      }
    }
    public static Sooda.Schema.ClassInfo TheClassInfo {
      get {
        return _theClassInfo;
      }
    }
    public virtual SoodaObject GetRef(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.TokenStatus_Stub.GetRef(tran, ((int)(keyValue)));
    }
    public virtual SoodaObject TryGet(SoodaTransaction tran, object keyValue) {
      return NGinn.Engine.Dao.Stubs.TokenStatus_Stub.TryGet(tran, ((int)(keyValue)));
    }
    public virtual System.Collections.IList GetList(SoodaTransaction tran, SoodaWhereClause whereClause, SoodaOrderBy orderBy, SoodaSnapshotOptions options) {
      return NGinn.Engine.Dao.Stubs.TokenStatus_Stub.GetList(tran, whereClause, orderBy, options);
    }
    public virtual Sooda.Schema.ClassInfo GetClassInfo() {
      return TheClassInfo;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetPrimaryKeyFieldHandler() {
      return _primaryKeyFieldHandler;
    }
    public virtual Sooda.ObjectMapper.SoodaFieldHandler GetFieldHandler(int ordinal) {
      return InternalGetFieldHandler(ordinal);
    }
    internal static Sooda.ObjectMapper.SoodaFieldHandler InternalGetFieldHandler(int ordinal) {
      return _fieldHandlers[ordinal];
    }
    public virtual SoodaObject CreateNew(SoodaTransaction tran) {
      return new TokenStatus(tran);
    }
    public virtual SoodaObject GetRawObject(SoodaTransaction tran) {
      TokenStatus retVal = new TokenStatus(SoodaConstructor.Constructor);
      retVal.InitRawObject(tran);
      return retVal;
    }
  }
  public class ProcessDefinitionDbCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public ProcessDefinitionDbCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessDefinitionDb item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessDefinitionDbWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(int item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsProcessDefinitionDbWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("ProcessDefinitionDb", whereClause);
    }
  }
  public class ProcessDefinitionDbWrapperExpression : Sooda.QL.SoqlPathExpression {
    public ProcessDefinitionDbWrapperExpression() {
    }
    public ProcessDefinitionDbWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Id"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Name"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Version {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Version"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression FullName {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "FullName"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessDefinitionDbWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessDefinitionDb[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params int[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(int left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDbWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDb left, ProcessDefinitionDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessDefinitionDbWrapperExpression left, ProcessDefinitionDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class ProcessDefinitionDbNullableWrapperExpression : ProcessDefinitionDbWrapperExpression {
    public ProcessDefinitionDbNullableWrapperExpression() {
    }
    public ProcessDefinitionDbNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
  public class ProcessInstanceDbCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public ProcessInstanceDbCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessInstanceDb item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(ProcessInstanceDbWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(System.Guid item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsProcessInstanceDbWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("ProcessInstanceDb", whereClause);
    }
  }
  public class ProcessInstanceDbWrapperExpression : Sooda.QL.SoqlPathExpression {
    public ProcessInstanceDbWrapperExpression() {
    }
    public ProcessInstanceDbWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression InstanceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "InstanceId"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression DefinitionId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "DefinitionId"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Status"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "RecordVersion"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessInstanceDbWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params ProcessInstanceDb[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params System.Guid[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(System.Guid left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(System.Guid left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDbWrapperExpression left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(System.Guid left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(System.Guid left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDb left, ProcessInstanceDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(ProcessInstanceDbWrapperExpression left, ProcessInstanceDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class ProcessInstanceDbNullableWrapperExpression : ProcessInstanceDbWrapperExpression {
    public ProcessInstanceDbNullableWrapperExpression() {
    }
    public ProcessInstanceDbNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
  public class TokenDbCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public TokenDbCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(TokenDb item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(TokenDbWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(System.Guid item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsTokenDbWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("TokenDb", whereClause);
    }
  }
  public class TokenDbWrapperExpression : Sooda.QL.SoqlPathExpression {
    public TokenDbWrapperExpression() {
    }
    public TokenDbWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Id"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression ProcessInstance {
      get {
        return new Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "ProcessInstance"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Mode {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Mode"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Status"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression PlaceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "PlaceId"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "RecordVersion"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params TokenDbWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params TokenDb[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params System.Guid[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(System.Guid left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(System.Guid left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDbWrapperExpression left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(System.Guid left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(System.Guid left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDbWrapperExpression left, System.Guid right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDb left, TokenDbWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenDbWrapperExpression left, TokenDb right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class TokenDbNullableWrapperExpression : TokenDbWrapperExpression {
    public TokenDbNullableWrapperExpression() {
    }
    public TokenDbNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
  public class TokenStatusCollectionExpression : Sooda.QL.TypedWrappers.SoqlCollectionWrapperExpression {
    public TokenStatusCollectionExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(TokenStatus item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(TokenStatusWrapperExpression item) {
      return this.ContainsImpl(item);
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression Contains(int item) {
      return this.ContainsImpl(new Sooda.QL.SoqlLiteralExpression(item));
    }
    public virtual Sooda.QL.TypedWrappers.SoqlBooleanWrapperExpression ContainsTokenStatusWhere(Sooda.QL.SoqlBooleanExpression whereClause) {
      return this.ContainsExprImpl("TokenStatus", whereClause);
    }
  }
  public class TokenStatusWrapperExpression : Sooda.QL.SoqlPathExpression {
    public TokenStatusWrapperExpression() {
    }
    public TokenStatusWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(this));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Id"));
      }
    }
    public virtual Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression(this, "Name"));
      }
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params TokenStatusWrapperExpression[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params TokenStatus[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public virtual Sooda.QL.SoqlBooleanExpression In(params int[] items) {
      return new Sooda.QL.SoqlBooleanInExpression(this, items);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenStatusWrapperExpression left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenStatusWrapperExpression left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(int left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(int left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenStatus left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenStatus left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator ==(TokenStatusWrapperExpression left, TokenStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression operator !=(TokenStatusWrapperExpression left, TokenStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenStatusWrapperExpression left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenStatusWrapperExpression left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(int left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(int left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenStatusWrapperExpression left, int right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenStatus left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenStatus left, TokenStatusWrapperExpression right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(new Sooda.QL.SoqlLiteralExpression(left.GetPrimaryKeyValue()), right, Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression Equals(TokenStatusWrapperExpression left, TokenStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.Equal);
    }
    public static Sooda.QL.SoqlBooleanRelationalExpression NotEqualTo(TokenStatusWrapperExpression left, TokenStatus right) {
      return new Sooda.QL.SoqlBooleanRelationalExpression(left, new Sooda.QL.SoqlLiteralExpression(right.GetPrimaryKeyValue()), Sooda.QL.SoqlRelationalOperator.NotEqual);
    }
    public override bool Equals(object o) {
      return object.ReferenceEquals(this, o);
    }
    public override int GetHashCode() {
      return base.GetHashCode();
    }
  }
  public class TokenStatusNullableWrapperExpression : TokenStatusWrapperExpression {
    public TokenStatusNullableWrapperExpression() {
    }
    public TokenStatusNullableWrapperExpression(Sooda.QL.SoqlPathExpression left, string name) : 
        base(left, name) {
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, false);
    }
    public virtual Sooda.QL.SoqlBooleanExpression IsNotNull() {
      return new Sooda.QL.SoqlBooleanIsNullExpression(this, true);
    }
  }
}
namespace NGinn.Engine.Dao.TypedQueries {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using NGinn.Engine.Dao.Stubs;
  
  public class ProcessDefinitionDbField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Id"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("Name"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Version {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Version"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression FullName {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("FullName"));
      }
    }
  }
  public class ProcessInstanceDbField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression InstanceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression(new Sooda.QL.SoqlPathExpression("InstanceId"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression DefinitionId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("DefinitionId"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Status"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("RecordVersion"));
      }
    }
  }
  public class TokenDbField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression(new Sooda.QL.SoqlPathExpression("Id"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression ProcessInstance {
      get {
        return new Sooda.QL.TypedWrappers.SoqlGuidWrapperExpression(new Sooda.QL.SoqlPathExpression("ProcessInstance"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Mode {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Mode"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Status {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Status"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression PlaceId {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("PlaceId"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression RecordVersion {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("RecordVersion"));
      }
    }
  }
  public class TokenStatusField : object {
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression SoodaClass {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlSoodaClassExpression(null));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression Id {
      get {
        return new Sooda.QL.TypedWrappers.SoqlInt32WrapperExpression(new Sooda.QL.SoqlPathExpression("Id"));
      }
    }
    public static Sooda.QL.TypedWrappers.SoqlStringWrapperExpression Name {
      get {
        return new Sooda.QL.TypedWrappers.SoqlStringWrapperExpression(new Sooda.QL.SoqlPathExpression("Name"));
      }
    }
  }
}
namespace NGinn.Engine.Dao {
  using System;
  using System.Collections;
  using System.Diagnostics;
  using System.Data;
  using Sooda;
  using NGinn.Engine.Dao.Stubs;
  
  public class _DatabaseSchema : object, Sooda.ObjectMapper.ISoodaSchema {
    private Sooda.ISoodaObjectFactory[] _factories;
    private static Sooda.Schema.SchemaInfo _theSchema;
    static _DatabaseSchema() {
      _theSchema = LoadSchema();
    }
    public _DatabaseSchema() {
      this._factories = new ISoodaObjectFactory[] {
          NGinn.Engine.Dao.Stubs.ProcessDefinitionDb_Factory.TheFactory,
          NGinn.Engine.Dao.Stubs.ProcessInstanceDb_Factory.TheFactory,
          NGinn.Engine.Dao.Stubs.TokenDb_Factory.TheFactory,
          NGinn.Engine.Dao.Stubs.TokenStatus_Factory.TheFactory};
    }
    public virtual Sooda.Schema.SchemaInfo Schema {
      get {
        return GetSchema();
      }
    }
    public static Sooda.Schema.SchemaInfo GetSchema() {
      return _theSchema;
    }
    private static Sooda.Schema.SchemaInfo LoadSchema() {
      return Sooda.ObjectMapper.SchemaLoader.GetSchemaFromAssembly(typeof(NGinn.Engine.Dao._DatabaseSchema).Assembly);
    }
    public virtual Sooda.ISoodaObjectFactory[] GetFactories() {
      return this._factories;
    }
  }
}
